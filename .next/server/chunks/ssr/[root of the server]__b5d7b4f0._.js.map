{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/lib/stripe.ts"],"sourcesContent":["'server-only'\nimport Stripe from 'stripe'\n\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n    apiVersion: '2024-06-20',\n})\n\n"],"names":[],"mappings":";;;AACA;AADA;;AAGO,MAAM,SAAS,IAAI,sJAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAG;IAC7D,YAAY;AAChB","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,oIAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;SAAO,GAAG;YAAC;SAAQ;IAClE;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/lib/stripe-actions.ts"],"sourcesContent":["'use server'\n\nimport { auth } from \"@clerk/nextjs/server\";\nimport { stripe } from \"./stripe\";\nimport { redirect } from \"next/navigation\";\nimport { db } from \"@/server/db\";\n\nexport async function createCheckoutSession() {\n    const { userId } = await auth();\n\n    if (!userId) {\n        throw new Error('User not found');\n    }\n\n    const session = await stripe.checkout.sessions.create({\n        payment_method_types: ['card'],\n        line_items: [\n            {\n                price: process.env.STRIPE_PRICE_ID,\n                quantity: 1,\n            },\n        ],\n        mode: 'subscription',\n        success_url: `${process.env.NEXT_PUBLIC_URL}/mail`,\n        cancel_url: `${process.env.NEXT_PUBLIC_URL}/pricing`,\n        client_reference_id: userId.toString(),\n    });\n\n    redirect(session.url!);\n}\n\nexport async function createBillingPortalSession() {\n    const { userId } = await auth();\n    if (!userId) {\n        return false\n    }\n    const subscription = await db.stripeSubscription.findUnique({\n        where: { userId: userId },\n    });\n    if (!subscription?.customerId) {\n        throw new Error('Subscription not found');\n    }\n    const session = await stripe.billingPortal.sessions.create({\n        customer: subscription.customerId,\n        return_url: `${process.env.NEXT_PUBLIC_URL}/pricing`,\n    });\n    redirect(session.url!)\n}\n\nexport async function getSubscriptionStatus() {\n    const { userId } = await auth();\n    if (!userId) {\n        return false\n    }\n    const subscription = await db.stripeSubscription.findUnique({\n        where: { userId: userId },\n    });\n    if (!subscription) {\n        return false;\n    }\n    return subscription.currentPeriodEnd > new Date();\n}\n\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;AAAA;AACA;;;;;;;;AAEO,eAAe,uCAAmB,GAAnB;IAClB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAE5B,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IAEA,MAAM,UAAU,MAAM,oHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;QAClD,sBAAsB;YAAC;SAAO;QAC9B,YAAY;YACR;gBACI,OAAO,QAAQ,GAAG,CAAC,eAAe;gBAClC,UAAU;YACd;SACH;QACD,MAAM;QACN,aAAa,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC;QAClD,YAAY,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC;QACpD,qBAAqB,OAAO,QAAQ;IACxC;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,GAAG;AACxB;AAEO,eAAe,uCAAwB,GAAxB;IAClB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACT,OAAO;IACX;IACA,MAAM,eAAe,MAAM,mHAAA,CAAA,KAAE,CAAC,kBAAkB,CAAC,UAAU,CAAC;QACxD,OAAO;YAAE,QAAQ;QAAO;IAC5B;IACA,IAAI,CAAC,cAAc,YAAY;QAC3B,MAAM,IAAI,MAAM;IACpB;IACA,MAAM,UAAU,MAAM,oHAAA,CAAA,SAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC;QACvD,UAAU,aAAa,UAAU;QACjC,YAAY,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC;IACxD;IACA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,GAAG;AACxB;AAEO,eAAe,uCAAmB,GAAnB;IAClB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACT,OAAO;IACX;IACA,MAAM,eAAe,MAAM,mHAAA,CAAA,KAAE,CAAC,kBAAkB,CAAC,UAAU,CAAC;QACxD,OAAO;YAAE,QAAQ;QAAO;IAC5B;IACA,IAAI,CAAC,cAAc;QACf,OAAO;IACX;IACA,OAAO,aAAa,gBAAgB,GAAG,IAAI;AAC/C;;;IAtDsB;IAwBA;IAkBA;;AA1CA,+OAAA;AAwBA,+OAAA;AAkBA,+OAAA","debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/constants.ts"],"sourcesContent":["export const FREE_CREDITS_PER_DAY = 15\nexport const FREE_ACCOUNTS_PER_USER = 1\nexport const PRO_ACCOUNTS_PER_USER = 3"],"names":[],"mappings":";;;;;AAAO,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/lib/gmail.ts"],"sourcesContent":["\"use server\";\n\nimport { google } from \"googleapis\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { getSubscriptionStatus } from \"./stripe-actions\";\nimport { db } from \"@/server/db\";\nimport { FREE_ACCOUNTS_PER_USER, PRO_ACCOUNTS_PER_USER } from \"@/app/constants\";\n\n// Create OAuth2 client\nfunction getOAuth2Client() {\n  console.log(\"Creating OAuth2 client with credentials...\");\n  return new google.auth.OAuth2(\n    process.env.GOOGLE_CLIENT_ID,\n    process.env.GOOGLE_CLIENT_SECRET,\n    `${process.env.NEXT_PUBLIC_URL}/api/auth/callback/gmail`,\n  );\n}\n\n/**\n * Generate the authorization URL for Gmail OAuth\n */\nexport const getGmailAuthUrl = async () => {\n  try {\n    console.log(\"Starting Gmail auth URL generation...\");\n    const { userId } = await auth();\n    if (!userId) {\n      console.error(\"No user ID found in auth\");\n      throw new Error(\"User not found\");\n    }\n    console.log(\"Got user ID:\", userId);\n\n    const user = await db.user.upsert({\n      where: { id: userId },\n      update: {},\n      create: {\n        id: userId,\n        emailAddress: \"temp@example.com\", // This will be updated by the webhook\n        role: \"user\",\n      },\n    });\n    console.log(\"User record created/updated:\", user);\n\n    // Check subscription limits\n    console.log(\"Checking subscription limits...\");\n    const isSubscribed = await getSubscriptionStatus();\n    console.log(\"Subscription status:\", isSubscribed);\n\n    const accounts = await db.account.count({\n      where: { userId },\n    });\n    console.log(\"Current account count:\", accounts);\n    console.log(\n      \"Account limit:\",\n      isSubscribed ? PRO_ACCOUNTS_PER_USER : FREE_ACCOUNTS_PER_USER,\n    );\n\n    if (user.role === \"user\") {\n      if (isSubscribed) {\n        if (accounts >= PRO_ACCOUNTS_PER_USER) {\n          console.error(\"User has reached maximum accounts for subscription\", {\n            currentAccounts: accounts,\n            maxAccounts: PRO_ACCOUNTS_PER_USER,\n            isSubscribed: true,\n          });\n          throw new Error(\n            \"You have reached the maximum number of accounts for your subscription\",\n          );\n        }\n      } else {\n        if (accounts >= FREE_ACCOUNTS_PER_USER) {\n          console.error(\"User has reached maximum free accounts\", {\n            currentAccounts: accounts,\n            maxAccounts: FREE_ACCOUNTS_PER_USER,\n            isSubscribed: false,\n          });\n          throw new Error(\n            \"You have reached the maximum number of accounts for your subscription\",\n          );\n        }\n      }\n    }\n\n    console.log(\"Creating OAuth2 client...\");\n    const oauth2Client = getOAuth2Client();\n    const scopes = [\n      \"https://www.googleapis.com/auth/gmail.readonly\",\n      \"https://www.googleapis.com/auth/gmail.send\",\n      \"https://www.googleapis.com/auth/gmail.compose\",\n      \"https://www.googleapis.com/auth/gmail.modify\",\n      \"https://www.googleapis.com/auth/userinfo.email\",\n      \"https://www.googleapis.com/auth/userinfo.profile\",\n    ];\n    console.log(\"Using scopes:\", scopes);\n\n    console.log(\"Generating auth URL with state:\", userId);\n    const authUrl = oauth2Client.generateAuthUrl({\n      access_type: \"offline\",\n      scope: scopes,\n      prompt: \"consent\",\n      state: userId,\n    });\n    console.log(\"Auth URL generated successfully:\", authUrl);\n\n    return authUrl;\n  } catch (error) {\n    console.error(\"Error in getGmailAuthUrl:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n\n/**\n * Exchange authorization code for tokens\n */\nexport const getGmailTokens = async (code: string) => {\n  try {\n    console.log(\"Starting token exchange process...\");\n    console.log(\"Creating OAuth2 client for token exchange...\");\n    const oauth2Client = getOAuth2Client();\n\n    console.log(\"Exchanging code for tokens...\");\n    const { tokens } = await oauth2Client.getToken(code);\n\n    console.log(\"Token exchange successful\");\n    if (!tokens.access_token) {\n      console.error(\"No access token received\");\n      throw new Error(\"Failed to get access token\");\n    }\n\n    console.log(\"Tokens received:\", {\n      accessTokenExists: !!tokens.access_token,\n      refreshTokenExists: !!tokens.refresh_token,\n      expiryDate: tokens.expiry_date,\n    });\n\n    return {\n      accessToken: tokens.access_token,\n      refreshToken: tokens.refresh_token,\n      expiryDate: tokens.expiry_date,\n    };\n  } catch (error) {\n    console.error(\"Error in getGmailTokens:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n\n/**\n * Get Gmail user information\n */\nexport const getGmailUserInfo = async (accessToken: string) => {\n  try {\n    console.log(\"Starting user info fetch process...\");\n    console.log(\"Setting up OAuth2 client with access token...\");\n    const oauth2Client = getOAuth2Client();\n    oauth2Client.setCredentials({ access_token: accessToken });\n\n    console.log(\"Creating People API client...\");\n    const peopleApi = google.people({ version: \"v1\", auth: oauth2Client });\n\n    console.log(\"Fetching user profile...\");\n    const profile = await peopleApi.people.get({\n      resourceName: \"people/me\",\n      personFields: \"emailAddresses,names\",\n    });\n\n    console.log(\"User profile fetched successfully\");\n    const userInfo = {\n      email: profile.data.emailAddresses?.[0]?.value || \"\",\n      name: profile.data.names?.[0]?.displayName || \"\",\n    };\n    console.log(\"User info:\", userInfo);\n\n    return userInfo;\n  } catch (error) {\n    console.error(\"Error in getGmailUserInfo:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n\n/**\n * Create a Gmail account for syncing emails\n */\nexport async function createGmailAccount(\n  accessToken: string,\n  refreshToken: string | null | undefined,\n) {\n  try {\n    console.log(\"Creating Gmail account with tokens...\");\n    console.log(\"Token info:\", {\n      accessTokenExists: !!accessToken,\n      refreshTokenExists: !!refreshToken,\n    });\n\n    // Implementation for syncing emails and sending\n    const gmailAccount = {\n      accessToken,\n      refreshToken,\n\n      async syncEmails() {\n        console.log(\"Starting email sync process...\");\n        // Implement email syncing logic here\n        return { success: true, count: 0 };\n      },\n\n      async sendEmail(options: { to: string; subject: string; body: string }) {\n        console.log(\"Sending email:\", options);\n        const oauth2Client = getOAuth2Client();\n        oauth2Client.setCredentials({ access_token: accessToken });\n\n        const gmail = google.gmail({ version: \"v1\", auth: oauth2Client });\n\n        // Format the email according to Gmail API requirements\n        const message = [\n          `To: ${options.to}`,\n          `Subject: ${options.subject}`,\n          \"Content-Type: text/html; charset=utf-8\",\n          \"\",\n          options.body,\n        ].join(\"\\n\");\n\n        const encodedMessage = Buffer.from(message)\n          .toString(\"base64\")\n          .replace(/\\+/g, \"-\")\n          .replace(/\\//g, \"_\")\n          .replace(/=+$/, \"\");\n\n        console.log(\"Sending email via Gmail API...\");\n        await gmail.users.messages.send({\n          userId: \"me\",\n          requestBody: {\n            raw: encodedMessage,\n          },\n        });\n\n        console.log(\"Email sent successfully\");\n        return { success: true };\n      },\n    };\n\n    console.log(\"Gmail account created successfully\");\n    return gmailAccount;\n  } catch (error) {\n    console.error(\"Error in createGmailAccount:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/mail/client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mail/client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mail/client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 529, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/mail/client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mail/client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mail/client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","debugId":null}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/%28auth%29/mail/page.tsx"],"sourcesContent":["import { cookies } from \"next/headers\";\nimport MailClient from \"@/app/mail/client\";\n\nexport const metadata = {\n  title: \"Mail - Lumi\",\n  description: \"Example mail app built with shadcn/ui components\",\n};\n\nexport default async function MailPage() {\n  // First await the cookies() function itself\n  const cookiesStore = await cookies();\n\n  // Then get values from the cookie store\n  const layout = cookiesStore.get(\"react-resizable-panels:layout:mail\");\n  const collapsed = cookiesStore.get(\"react-resizable-panels:collapsed\");\n\n  // Parse the layout from cookies\n  let defaultLayout = undefined;\n  try {\n    if (layout?.value) {\n      defaultLayout = JSON.parse(layout.value);\n    }\n  } catch (e) {\n    console.error(\"Failed to parse layout from cookies\", e);\n  }\n\n  // Parse collapsed state\n  const defaultCollapsed = collapsed ? JSON.parse(collapsed.value) : undefined;\n\n  return (\n    <div className=\"flex h-screen w-screen flex-col\">\n      <div className=\"hidden h-full w-full flex-1 md:flex\">\n        <MailClient\n          defaultLayout={defaultLayout}\n          defaultCollapsed={defaultCollapsed}\n        />\n      </div>\n      <div className=\"block p-4 text-center md:hidden\">\n        <p>Mail interface not available on mobile devices.</p>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAEO,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAEe,eAAe;IAC5B,4CAA4C;IAC5C,MAAM,eAAe,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEjC,wCAAwC;IACxC,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,YAAY,aAAa,GAAG,CAAC;IAEnC,gCAAgC;IAChC,IAAI,gBAAgB;IACpB,IAAI;QACF,IAAI,QAAQ,OAAO;YACjB,gBAAgB,KAAK,KAAK,CAAC,OAAO,KAAK;QACzC;IACF,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,uCAAuC;IACvD;IAEA,wBAAwB;IACxB,MAAM,mBAAmB,YAAY,KAAK,KAAK,CAAC,UAAU,KAAK,IAAI;IAEnE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,6HAAA,CAAA,UAAU;oBACT,eAAe;oBACf,kBAAkB;;;;;;;;;;;0BAGtB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;8BAAE;;;;;;;;;;;;;;;;;AAIX","debugId":null}}]
}