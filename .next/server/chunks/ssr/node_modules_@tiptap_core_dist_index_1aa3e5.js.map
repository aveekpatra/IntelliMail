{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@tiptap/core/src/helpers/createChainableState.ts","/turbopack/[project]/node_modules/@tiptap/core/src/CommandManager.ts","/turbopack/[project]/node_modules/@tiptap/core/src/EventEmitter.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getExtensionField.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/splitExtensions.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getAttributesFromExtensions.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getNodeType.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/mergeAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getRenderedAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isFunction.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/callOrReturn.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isEmptyObject.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/fromString.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/injectExtensionAttributesToParseRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getSchemaByResolvedExtensions.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getSchemaTypeByName.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isExtensionRulesEnabled.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getHTMLFromFragment.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getTextContentFromNodes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isRegExp.ts","/turbopack/[project]/node_modules/@tiptap/core/src/InputRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isPlainObject.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/mergeDeep.ts","/turbopack/[project]/node_modules/@tiptap/core/src/Mark.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isNumber.ts","/turbopack/[project]/node_modules/@tiptap/core/src/PasteRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/findDuplicates.ts","/turbopack/[project]/node_modules/@tiptap/core/src/ExtensionManager.ts","/turbopack/[project]/node_modules/@tiptap/core/src/Extension.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getTextBetween.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getTextSerializersFromSchema.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/clipboardTextSerializer.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/blur.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/clearContent.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/clearNodes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/command.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/createParagraphNear.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/cut.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/deleteCurrentNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/deleteNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/deleteRange.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/deleteSelection.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/enter.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/exitCode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/objectIncludes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getMarkRange.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getMarkType.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/extendMarkRange.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/first.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isTextSelection.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/minMax.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/resolveFocusPosition.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isAndroid.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isiOS.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/focus.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/forEach.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/insertContent.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/elementFromString.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/createNodeFromContent.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/selectionToInsertionEnd.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/insertContentAt.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/join.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/joinItemBackward.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/joinItemForward.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/joinTextblockBackward.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/joinTextblockForward.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isMacOS.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/keyboardShortcut.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isNodeActive.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/lift.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/liftEmptyBlock.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/liftListItem.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/newlineInCode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getSchemaTypeNameByName.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/deleteProps.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/resetAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/scrollIntoView.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/selectAll.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/selectNodeBackward.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/selectNodeForward.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/selectParentNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/selectTextblockEnd.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/selectTextblockStart.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/createDocument.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/setContent.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getMarkAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/combineTransactionSteps.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/defaultBlockAt.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/findChildren.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/findChildrenInRange.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/findParentNodeClosestToPos.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/findParentNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getSchema.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/generateHTML.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/generateJSON.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getText.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/generateText.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getNodeAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/removeDuplicates.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getChangedRanges.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getDebugJSON.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getMarksBetween.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getNodeAtPosition.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/getSplittedAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isMarkActive.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isActive.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isAtEndOfNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isAtStartOfNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isList.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isNodeEmpty.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/isNodeSelection.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/posToDOMRect.ts","/turbopack/[project]/node_modules/@tiptap/core/src/helpers/rewriteUnknownContent.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/setMark.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/setMeta.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/setNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/setNodeSelection.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/setTextSelection.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/sinkListItem.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/splitBlock.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/splitListItem.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/toggleList.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/toggleMark.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/toggleNode.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/toggleWrap.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/undoInputRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/unsetAllMarks.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/unsetMark.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/updateAttributes.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/wrapIn.ts","/turbopack/[project]/node_modules/@tiptap/core/src/commands/wrapInList.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/commands.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/drop.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/editable.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/focusEvents.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/keymap.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/paste.ts","/turbopack/[project]/node_modules/@tiptap/core/src/extensions/tabindex.ts","/turbopack/[project]/node_modules/@tiptap/core/src/NodePos.ts","/turbopack/[project]/node_modules/@tiptap/core/src/style.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/createStyleTag.ts","/turbopack/[project]/node_modules/@tiptap/core/src/Editor.ts","/turbopack/[project]/node_modules/@tiptap/core/src/inputRules/markInputRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/inputRules/nodeInputRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/inputRules/textblockTypeInputRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/inputRules/textInputRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/inputRules/wrappingInputRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/Node.ts","/turbopack/[project]/node_modules/@tiptap/core/src/NodeView.ts","/turbopack/[project]/node_modules/@tiptap/core/src/pasteRules/markPasteRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/escapeForRegEx.ts","/turbopack/[project]/node_modules/@tiptap/core/src/utilities/isString.ts","/turbopack/[project]/node_modules/@tiptap/core/src/pasteRules/nodePasteRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/pasteRules/textPasteRule.ts","/turbopack/[project]/node_modules/@tiptap/core/src/Tracker.ts"],"sourcesContent":["import { EditorState, Transaction } from '@tiptap/pm/state'\n\n/**\n * Takes a Transaction & Editor State and turns it into a chainable state object\n * @param config The transaction and state to create the chainable state from\n * @returns A chainable Editor state object\n */\nexport function createChainableState(config: {\n  transaction: Transaction\n  state: EditorState\n}): EditorState {\n  const { state, transaction } = config\n  let { selection } = transaction\n  let { doc } = transaction\n  let { storedMarks } = transaction\n\n  return {\n    ...state,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks\n    },\n    get selection() {\n      return selection\n    },\n    get doc() {\n      return doc\n    },\n    get tr() {\n      selection = transaction.selection\n      doc = transaction.doc\n      storedMarks = transaction.storedMarks\n\n      return transaction\n    },\n  }\n}\n","import { EditorState, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { createChainableState } from './helpers/createChainableState.js'\nimport {\n  AnyCommands, CanCommands, ChainedCommands, CommandProps, SingleCommands,\n} from './types.js'\n\nexport class CommandManager {\n  editor: Editor\n\n  rawCommands: AnyCommands\n\n  customState?: EditorState\n\n  constructor(props: { editor: Editor; state?: EditorState }) {\n    this.editor = props.editor\n    this.rawCommands = this.editor.extensionManager.commands\n    this.customState = props.state\n  }\n\n  get hasCustomState(): boolean {\n    return !!this.customState\n  }\n\n  get state(): EditorState {\n    return this.customState || this.editor.state\n  }\n\n  get commands(): SingleCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(\n      Object.entries(rawCommands).map(([name, command]) => {\n        const method = (...args: any[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      }),\n    ) as unknown as SingleCommands\n  }\n\n  get chain(): () => ChainedCommands {\n    return () => this.createChain()\n  }\n\n  get can(): () => CanCommands {\n    return () => this.createCan()\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (\n        !hasStartTransaction\n        && shouldDispatch\n        && !tr.getMeta('preventDispatch')\n        && !this.hasCustomState\n      ) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(\n        Object.entries(rawCommands).map(([name, command]) => {\n          const chainedCommand = (...args: never[]) => {\n            const props = this.buildProps(tr, shouldDispatch)\n            const callback = command(...args)(props)\n\n            callbacks.push(callback)\n\n            return chain\n          }\n\n          return [name, chainedCommand]\n        }),\n      ),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { rawCommands, state } = this\n    const dispatch = false\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(\n      Object.entries(rawCommands).map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch: undefined })]\n      }),\n    ) as unknown as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr,\n      }),\n      dispatch: shouldDispatch ? () => undefined : undefined,\n      chain: () => this.createChain(tr, shouldDispatch),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(\n          Object.entries(rawCommands).map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          }),\n        ) as unknown as SingleCommands\n      },\n    }\n\n    return props\n  }\n}\n","type StringKeyOf<T> = Extract<keyof T, string>\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]]\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any\n\nexport class EventEmitter<T extends Record<string, any>> {\n\n  private callbacks: { [key: string]: Array<(...args: any[])=>void> } = {}\n\n  public on<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  public emit<EventName extends StringKeyOf<T>>(event: EventName, ...args: CallbackType<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off<EventName extends StringKeyOf<T>>(event: EventName, fn?: CallbackFunction<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  public once<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    const onceFn = (...args: CallbackType<T, EventName>) => {\n      this.off(event, onceFn)\n      fn.apply(this, args)\n    }\n\n    return this.on(event, onceFn)\n  }\n\n  public removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n","import { AnyExtension, MaybeThisParameterType, RemoveThis } from '../types.js'\n\n/**\n * Returns a field from an extension\n * @param extension The Tiptap extension\n * @param field The field, for example `renderHTML` or `priority`\n * @param context The context object that should be passed as `this` into the function\n * @returns The field value\n */\nexport function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context?: Omit<MaybeThisParameterType<T>, 'parent'>,\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n","import { Extension } from '../Extension.js'\nimport { Mark } from '../Mark.js'\nimport { Node } from '../Node.js'\nimport { Extensions } from '../types.js'\n\nexport function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n","import { MarkConfig, NodeConfig } from '../index.js'\nimport {\n  AnyConfig,\n  Attribute,\n  Attributes,\n  ExtensionAttribute,\n  Extensions,\n} from '../types.js'\nimport { getExtensionField } from './getExtensionField.js'\nimport { splitExtensions } from './splitExtensions.js'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      extensions: nodeAndMarkExtensions,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    const globalAttributes = addGlobalAttributes()\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        const mergedAttr = {\n          ...defaultAttribute,\n          ...attribute,\n        }\n\n        if (typeof mergedAttr?.default === 'function') {\n          mergedAttr.default = mergedAttr.default()\n        }\n\n        if (mergedAttr?.isRequired && mergedAttr?.default === undefined) {\n          delete mergedAttr.default\n        }\n\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: mergedAttr,\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n","import { NodeType, Schema } from '@tiptap/pm/model'\n\nexport function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(\n        `There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`,\n      )\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n","export function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n\n          return\n        }\n\n        if (key === 'class') {\n          const valueClasses: string[] = value ? String(value).split(' ') : []\n          const existingClasses: string[] = mergedAttributes[key] ? mergedAttributes[key].split(' ') : []\n\n          const insertClasses = valueClasses.filter(\n            valueClass => !existingClasses.includes(valueClass),\n          )\n\n          mergedAttributes[key] = [...existingClasses, ...insertClasses].join(' ')\n        } else if (key === 'style') {\n          const newStyles: string[] = value ? value.split(';').map((style: string) => style.trim()).filter(Boolean) : []\n          const existingStyles: string[] = mergedAttributes[key] ? mergedAttributes[key].split(';').map((style: string) => style.trim()).filter(Boolean) : []\n\n          const styleMap = new Map<string, string>()\n\n          existingStyles.forEach(style => {\n            const [property, val] = style.split(':').map(part => part.trim())\n\n            styleMap.set(property, val)\n          })\n\n          newStyles.forEach(style => {\n            const [property, val] = style.split(':').map(part => part.trim())\n\n            styleMap.set(property, val)\n          })\n\n          mergedAttributes[key] = Array.from(styleMap.entries()).map(([property, val]) => `${property}: ${val}`).join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n","import { Mark, Node } from '@tiptap/pm/model'\n\nimport { ExtensionAttribute } from '../types.js'\nimport { mergeAttributes } from '../utilities/mergeAttributes.js'\n\nexport function getRenderedAttributes(\n  nodeOrMark: Node | Mark,\n  extensionAttributes: ExtensionAttribute[],\n): Record<string, any> {\n  return extensionAttributes\n    .filter(\n      attribute => attribute.type === nodeOrMark.type.name,\n    )\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {})\n}\n","// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function'\n}\n","import { MaybeReturnType } from '../types.js'\nimport { isFunction } from './isFunction.js'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n","export function isEmptyObject(value = {}): boolean {\n  return Object.keys(value).length === 0 && value.constructor === Object\n}\n","export function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n","import { ParseRule } from '@tiptap/pm/model'\n\nimport { ExtensionAttribute } from '../types.js'\nimport { fromString } from '../utilities/fromString.js'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport function injectExtensionAttributesToParseRule(\n  parseRule: ParseRule,\n  extensionAttributes: ExtensionAttribute[],\n): ParseRule {\n  if ('style' in parseRule) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: (node: HTMLElement) => {\n      const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML\n          ? item.attribute.parseHTML(node)\n          : fromString((node).getAttribute(item.name))\n\n        if (value === null || value === undefined) {\n          return items\n        }\n\n        return {\n          ...items,\n          [item.name]: value,\n        }\n      }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n","import {\n  MarkSpec, NodeSpec, Schema, TagParseRule,\n} from '@tiptap/pm/model'\n\nimport { Editor, MarkConfig, NodeConfig } from '../index.js'\nimport { AnyConfig, Extensions } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\nimport { isEmptyObject } from '../utilities/isEmptyObject.js'\nimport { getAttributesFromExtensions } from './getAttributesFromExtensions.js'\nimport { getExtensionField } from './getExtensionField.js'\nimport { getRenderedAttributes } from './getRenderedAttributes.js'\nimport { injectExtensionAttributesToParseRule } from './injectExtensionAttributesToParseRule.js'\nimport { splitExtensions } from './splitExtensions.js'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(\n    // @ts-ignore\n    Object.entries(data).filter(([key, value]) => {\n      if (key === 'attrs' && isEmptyObject(value as object | undefined)) {\n        return false\n      }\n\n      return value !== null && value !== undefined\n    }),\n  ) as T\n}\n\n/**\n * Creates a new Prosemirror schema based on the given extensions.\n * @param extensions An array of Tiptap extensions\n * @param editor The editor instance\n * @returns A Prosemirror schema\n */\nexport function getSchemaByResolvedExtensions(extensions: Extensions, editor?: Editor): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(\n    nodeExtensions.map(extension => {\n      const extensionAttributes = allAttributes.filter(\n        attribute => attribute.type === extension.name,\n      )\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n      }\n\n      const extraNodeFields = extensions.reduce((fields, e) => {\n        const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n          e,\n          'extendNodeSchema',\n          context,\n        )\n\n        return {\n          ...fields,\n          ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n        }\n      }, {})\n\n      const schema: NodeSpec = cleanUpSchemaItem({\n        ...extraNodeFields,\n        content: callOrReturn(\n          getExtensionField<NodeConfig['content']>(extension, 'content', context),\n        ),\n        marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n        group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n        inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n        atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n        selectable: callOrReturn(\n          getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context),\n        ),\n        draggable: callOrReturn(\n          getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context),\n        ),\n        code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n        whitespace: callOrReturn(getExtensionField<NodeConfig['whitespace']>(extension, 'whitespace', context)),\n        linebreakReplacement: callOrReturn(getExtensionField<NodeConfig['linebreakReplacement']>(extension, 'linebreakReplacement', context)),\n        defining: callOrReturn(\n          getExtensionField<NodeConfig['defining']>(extension, 'defining', context),\n        ),\n        isolating: callOrReturn(\n          getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context),\n        ),\n        attrs: Object.fromEntries(\n          extensionAttributes.map(extensionAttribute => {\n            return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n          }),\n        ),\n      })\n\n      const parseHTML = callOrReturn(\n        getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context),\n      )\n\n      if (parseHTML) {\n        schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes)) as TagParseRule[]\n      }\n\n      const renderHTML = getExtensionField<NodeConfig['renderHTML']>(\n        extension,\n        'renderHTML',\n        context,\n      )\n\n      if (renderHTML) {\n        schema.toDOM = node => renderHTML({\n          node,\n          HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n        })\n      }\n\n      const renderText = getExtensionField<NodeConfig['renderText']>(\n        extension,\n        'renderText',\n        context,\n      )\n\n      if (renderText) {\n        schema.toText = renderText\n      }\n\n      return [extension.name, schema]\n    }),\n  )\n\n  const marks = Object.fromEntries(\n    markExtensions.map(extension => {\n      const extensionAttributes = allAttributes.filter(\n        attribute => attribute.type === extension.name,\n      )\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n      }\n\n      const extraMarkFields = extensions.reduce((fields, e) => {\n        const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n          e,\n          'extendMarkSchema',\n          context,\n        )\n\n        return {\n          ...fields,\n          ...(extendMarkSchema ? extendMarkSchema(extension as any) : {}),\n        }\n      }, {})\n\n      const schema: MarkSpec = cleanUpSchemaItem({\n        ...extraMarkFields,\n        inclusive: callOrReturn(\n          getExtensionField<MarkConfig['inclusive']>(extension, 'inclusive', context),\n        ),\n        excludes: callOrReturn(\n          getExtensionField<MarkConfig['excludes']>(extension, 'excludes', context),\n        ),\n        group: callOrReturn(getExtensionField<MarkConfig['group']>(extension, 'group', context)),\n        spanning: callOrReturn(\n          getExtensionField<MarkConfig['spanning']>(extension, 'spanning', context),\n        ),\n        code: callOrReturn(getExtensionField<MarkConfig['code']>(extension, 'code', context)),\n        attrs: Object.fromEntries(\n          extensionAttributes.map(extensionAttribute => {\n            return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n          }),\n        ),\n      })\n\n      const parseHTML = callOrReturn(\n        getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context),\n      )\n\n      if (parseHTML) {\n        schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n      }\n\n      const renderHTML = getExtensionField<MarkConfig['renderHTML']>(\n        extension,\n        'renderHTML',\n        context,\n      )\n\n      if (renderHTML) {\n        schema.toDOM = mark => renderHTML({\n          mark,\n          HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n        })\n      }\n\n      return [extension.name, schema]\n    }),\n  )\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n","import { MarkType, NodeType, Schema } from '@tiptap/pm/model'\n\n/**\n * Tries to get a node or mark type by its name.\n * @param name The name of the node or mark type\n * @param schema The Prosemiror schema to search in\n * @returns The node or mark type, or null if it doesn't exist\n */\nexport function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  return schema.nodes[name] || schema.marks[name] || null\n}\n","import { AnyExtension, EnableRules } from '../types.js'\n\nexport function isExtensionRulesEnabled(extension: AnyExtension, enabled: EnableRules): boolean {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string'\n        ? enabledExtension\n        : enabledExtension.name\n\n      return name === extension.name\n    })\n  }\n\n  return enabled\n}\n","import { DOMSerializer, Fragment, Schema } from '@tiptap/pm/model'\n\nexport function getHTMLFromFragment(fragment: Fragment, schema: Schema): string {\n  const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n\n  container.appendChild(documentFragment)\n\n  return container.innerHTML\n}\n","import { ResolvedPos } from '@tiptap/pm/model'\n\n/**\n * Returns the text content of a resolved prosemirror position\n * @param $from The resolved position to get the text content from\n * @param maxMatch The maximum number of characters to match\n * @returns The text content\n */\nexport const getTextContentFromNodes = ($from: ResolvedPos, maxMatch = 500) => {\n  let textBefore = ''\n\n  const sliceEndPos = $from.parentOffset\n\n  $from.parent.nodesBetween(\n    Math.max(0, sliceEndPos - maxMatch),\n    sliceEndPos,\n    (node, pos, parent, index) => {\n      const chunk = node.type.spec.toText?.({\n        node,\n        pos,\n        parent,\n        index,\n      })\n        || node.textContent\n        || '%leaf%'\n\n      textBefore += node.isAtom && !node.isText ? chunk : chunk.slice(0, Math.max(0, sliceEndPos - pos))\n    },\n  )\n\n  return textBefore\n}\n","export function isRegExp(value: any): value is RegExp {\n  return Object.prototype.toString.call(value) === '[object RegExp]'\n}\n","import { Fragment, Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { EditorState, Plugin, TextSelection } from '@tiptap/pm/state'\n\nimport { CommandManager } from './CommandManager.js'\nimport { Editor } from './Editor.js'\nimport { createChainableState } from './helpers/createChainableState.js'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment.js'\nimport { getTextContentFromNodes } from './helpers/getTextContentFromNodes.js'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types.js'\nimport { isRegExp } from './utilities/isRegExp.js'\n\nexport type InputRuleMatch = {\n  index: number;\n  text: string;\n  replaceWith?: string;\n  match?: RegExpMatchArray;\n  data?: Record<string, any>;\n};\n\nexport type InputRuleFinder = RegExp | ((text: string) => InputRuleMatch | null);\n\nexport class InputRule {\n  find: InputRuleFinder\n\n  handler: (props: {\n    state: EditorState;\n    range: Range;\n    match: ExtendedRegExpMatchArray;\n    commands: SingleCommands;\n    chain: () => ChainedCommands;\n    can: () => CanCommands;\n  }) => void | null\n\n  constructor(config: {\n    find: InputRuleFinder;\n    handler: (props: {\n      state: EditorState;\n      range: Range;\n      match: ExtendedRegExpMatchArray;\n      commands: SingleCommands;\n      chain: () => ChainedCommands;\n      can: () => CanCommands;\n    }) => void | null;\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst inputRuleMatcherHandler = (\n  text: string,\n  find: InputRuleFinder,\n): ExtendedRegExpMatchArray | null => {\n  if (isRegExp(find)) {\n    return find.exec(text)\n  }\n\n  const inputRuleMatch = find(text)\n\n  if (!inputRuleMatch) {\n    return null\n  }\n\n  const result: ExtendedRegExpMatchArray = [inputRuleMatch.text]\n\n  result.index = inputRuleMatch.index\n  result.input = text\n  result.data = inputRuleMatch.data\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn(\n        '[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".',\n      )\n    }\n\n    result.push(inputRuleMatch.replaceWith)\n  }\n\n  return result\n}\n\nfunction run(config: {\n  editor: Editor;\n  from: number;\n  to: number;\n  text: string;\n  rules: InputRule[];\n  plugin: Plugin;\n}): boolean {\n  const {\n    editor, from, to, text, rules, plugin,\n  } = config\n  const { view } = editor\n\n  if (view.composing) {\n    return false\n  }\n\n  const $from = view.state.doc.resolve(from)\n\n  if (\n    // check for code node\n    $from.parent.type.spec.code\n    // check for code mark\n    || !!($from.nodeBefore || $from.nodeAfter)?.marks.find(mark => mark.type.spec.code)\n  ) {\n    return false\n  }\n\n  let matched = false\n\n  const textBefore = getTextContentFromNodes($from) + text\n\n  rules.forEach(rule => {\n    if (matched) {\n      return\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find)\n\n    if (!match) {\n      return\n    }\n\n    const tr = view.state.tr\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr,\n    })\n    const range = {\n      from: from - (match[0].length - text.length),\n      to,\n    }\n\n    const { commands, chain, can } = new CommandManager({\n      editor,\n      state,\n    })\n\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can,\n    })\n\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return\n    }\n\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text,\n    })\n\n    view.dispatch(tr)\n    matched = true\n  })\n\n  return matched\n}\n\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function inputRulesPlugin(props: { editor: Editor; rules: InputRule[] }): Plugin {\n  const { editor, rules } = props\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null\n      },\n      apply(tr, prev, state) {\n        const stored = tr.getMeta(plugin)\n\n        if (stored) {\n          return stored\n        }\n\n        // if InputRule is triggered by insertContent()\n        const simulatedInputMeta = tr.getMeta('applyInputRules') as\n          | undefined\n          | {\n              from: number;\n              text: string | ProseMirrorNode | Fragment;\n            }\n        const isSimulatedInput = !!simulatedInputMeta\n\n        if (isSimulatedInput) {\n          setTimeout(() => {\n            let { text } = simulatedInputMeta\n\n            if (typeof text === 'string') {\n              text = text as string\n            } else {\n              text = getHTMLFromFragment(Fragment.from(text), state.schema)\n            }\n\n            const { from } = simulatedInputMeta\n            const to = from + text.length\n\n            run({\n              editor,\n              from,\n              to,\n              text,\n              rules,\n              plugin,\n            })\n          })\n        }\n\n        return tr.selectionSet || tr.docChanged ? null : prev\n      },\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin,\n        })\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n\n            if ($cursor) {\n              run({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin,\n              })\n            }\n          })\n\n          return false\n        },\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false\n        }\n\n        const { $cursor } = view.state.selection as TextSelection\n\n        if ($cursor) {\n          return run({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin,\n          })\n        }\n\n        return false\n      },\n    },\n\n    // @ts-ignore\n    isInputRules: true,\n  }) as Plugin\n\n  return plugin\n}\n","// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nexport function isPlainObject(value: any): value is Record<string, any> {\n  if (getType(value) !== 'Object') {\n    return false\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype\n}\n","import { isPlainObject } from './isPlainObject.js'\n\nexport function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key]) && isPlainObject(target[key])) {\n        output[key] = mergeDeep(target[key], source[key])\n      } else {\n        output[key] = source[key]\n      }\n    })\n  }\n\n  return output\n}\n","import {\n  DOMOutputSpec, Mark as ProseMirrorMark, MarkSpec, MarkType,\n} from '@tiptap/pm/model'\nimport { Plugin, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { MarkConfig } from './index.js'\nimport { InputRule } from './InputRule.js'\nimport { Node } from './Node.js'\nimport { PasteRule } from './PasteRule.js'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { mergeDeep } from './utilities/mergeDeep.js'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any, Storage = any> {\n    // @ts-ignore - this is a dynamic key\n    [key: string]: any\n\n    /**\n     * The extension name - this must be unique.\n     * It will be used to identify the extension.\n     *\n     * @example 'myExtension'\n     */\n    name: string\n\n    /**\n     * The priority of your extension. The higher, the earlier it will be called\n     * and will take precedence over other extensions with a lower priority.\n     * @default 100\n     * @example 101\n     */\n    priority?: number\n\n    /**\n     * The default options for this extension.\n     * @example\n     * defaultOptions: {\n     *   myOption: 'foo',\n     *   myOtherOption: 10,\n     * }\n     */\n    defaultOptions?: Options\n\n    /**\n     * This method will add options to this extension\n     * @see https://tiptap.dev/guide/custom-extensions#settings\n     * @example\n     * addOptions() {\n     *  return {\n     *    myOption: 'foo',\n     *    myOtherOption: 10,\n     * }\n     */\n    addOptions?: (this: {\n      name: string\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addOptions'], undefined>\n    }) => Options\n\n    /**\n     * The default storage this extension can save data to.\n     * @see https://tiptap.dev/guide/custom-extensions#storage\n     * @example\n     * defaultStorage: {\n     *   prefetchedUsers: [],\n     *   loading: false,\n     * }\n     */\n    addStorage?: (this: {\n      name: string\n      options: Options\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addStorage'], undefined>\n    }) => Storage\n\n    /**\n     * This function adds globalAttributes to specific nodes.\n     * @see https://tiptap.dev/guide/custom-extensions#global-attributes\n     * @example\n     * addGlobalAttributes() {\n     *   return [\n     *     {\n             // Extend the following extensions\n     *       types: [\n     *         'heading',\n     *         'paragraph',\n     *       ],\n     *       // … with those attributes\n     *       attributes: {\n     *         textAlign: {\n     *           default: 'left',\n     *           renderHTML: attributes => ({\n     *             style: `text-align: ${attributes.textAlign}`,\n     *           }),\n     *           parseHTML: element => element.style.textAlign || 'left',\n     *         },\n     *       },\n     *     },\n     *   ]\n     * }\n     */\n    addGlobalAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      extensions: (Node | Mark)[]\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addGlobalAttributes']\n    }) => GlobalAttributes\n\n    /**\n     * This function adds commands to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addCommands() {\n     *   return {\n     *     myCommand: () => ({ chain }) => chain().setMark('type', 'foo').run(),\n     *   }\n     * }\n     */\n    addCommands?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addCommands']\n    }) => Partial<RawCommands>\n\n    /**\n     * This function registers keyboard shortcuts.\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addKeyboardShortcuts() {\n     *   return {\n     *     'Mod-l': () => this.editor.commands.toggleBulletList(),\n     *   }\n     * },\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addKeyboardShortcuts']\n    }) => {\n      [key: string]: KeyboardShortcutCommand\n    }\n\n    /**\n     * This function adds input rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#input-rules\n     * @example\n     * addInputRules() {\n     *   return [\n     *     markInputRule({\n     *       find: inputRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addInputRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addInputRules']\n    }) => InputRule[]\n\n    /**\n     * This function adds paste rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#paste-rules\n     * @example\n     * addPasteRules() {\n     *   return [\n     *     markPasteRule({\n     *       find: pasteRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addPasteRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addPasteRules']\n    }) => PasteRule[]\n\n    /**\n     * This function adds Prosemirror plugins to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#prosemirror-plugins\n     * @example\n     * addProseMirrorPlugins() {\n     *   return [\n     *     customPlugin(),\n     *   ]\n     * }\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addProseMirrorPlugins']\n    }) => Plugin[]\n\n    /**\n     * This function adds additional extensions to the editor. This is useful for\n     * building extension kits.\n     * @example\n     * addExtensions() {\n     *   return [\n     *     BulletList,\n     *     OrderedList,\n     *     ListItem\n     *   ]\n     * }\n     */\n    addExtensions?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addExtensions']\n    }) => Extensions\n\n    /**\n     * This function extends the schema of the node.\n     * @example\n     * extendNodeSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendNodeSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<MarkConfig<Options, Storage>>['extendNodeSchema']\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * This function extends the schema of the mark.\n     * @example\n     * extendMarkSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendMarkSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<MarkConfig<Options, Storage>>['extendMarkSchema']\n          },\n          extension: Mark,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onBeforeCreate']\n        }) => void)\n      | null\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onCreate']\n        }) => void)\n      | null\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onSelectionUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: MarkType\n            parent: ParentConfig<MarkConfig<Options, Storage>>['onTransaction']\n          },\n          props: {\n            editor: Editor\n            transaction: Transaction\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: MarkType\n            parent: ParentConfig<MarkConfig<Options, Storage>>['onFocus']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: MarkType\n            parent: ParentConfig<MarkConfig<Options, Storage>>['onBlur']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onDestroy']\n        }) => void)\n      | null\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean)\n\n    /**\n     * Inclusive\n     */\n    inclusive?:\n      | MarkSpec['inclusive']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['inclusive']\n          editor?: Editor\n        }) => MarkSpec['inclusive'])\n\n    /**\n     * Excludes\n     */\n    excludes?:\n      | MarkSpec['excludes']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['excludes']\n          editor?: Editor\n        }) => MarkSpec['excludes'])\n\n    /**\n     * Marks this Mark as exitable\n     */\n    exitable?: boolean | (() => boolean)\n\n    /**\n     * Group\n     */\n    group?:\n      | MarkSpec['group']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['group']\n          editor?: Editor\n        }) => MarkSpec['group'])\n\n    /**\n     * Spanning\n     */\n    spanning?:\n      | MarkSpec['spanning']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['spanning']\n          editor?: Editor\n        }) => MarkSpec['spanning'])\n\n    /**\n     * Code\n     */\n    code?:\n      | boolean\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['code']\n          editor?: Editor\n        }) => boolean)\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<MarkConfig<Options, Storage>>['parseHTML']\n      editor?: Editor\n    }) => MarkSpec['parseDOM']\n\n    /**\n     * Render HTML\n     */\n    renderHTML?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<MarkConfig<Options, Storage>>['renderHTML']\n            editor?: Editor\n          },\n          props: {\n            mark: ProseMirrorMark\n            HTMLAttributes: Record<string, any>\n          },\n        ) => DOMOutputSpec)\n      | null\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addAttributes']\n      editor?: Editor\n    // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    }) => Attributes | {}\n  }\n}\n\n/**\n * The Mark class is used to create custom mark extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nexport class Mark<Options = any, Storage = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`,\n      )\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(\n        getExtensionField<AnyConfig['addOptions']>(this, 'addOptions', {\n          name: this.name,\n        }),\n      )\n    }\n\n    this.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(this, 'addStorage', {\n        name: this.name,\n        options: this.options,\n      }),\n    ) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<MarkConfig<O, S>> = {}) {\n    return new Mark<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend<Options, Storage>({\n      ...this.config,\n      addOptions: () => {\n        return mergeDeep(this.options as Record<string, any>, options) as Options\n      },\n    })\n\n    // Always preserve the current name\n    extension.name = this.name\n    // Set the parent to be our parent\n    extension.parent = this.parent\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(\n    extendedConfig: Partial<MarkConfig<ExtendedOptions, ExtendedStorage>> = {},\n  ) {\n    const extension = new Mark<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name\n\n    if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`,\n      )\n    }\n\n    extension.options = callOrReturn(\n      getExtensionField<AnyConfig['addOptions']>(extension, 'addOptions', {\n        name: extension.name,\n      }),\n    )\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n\n  static handleExit({ editor, mark }: { editor: Editor; mark: Mark }) {\n    const { tr } = editor.state\n    const currentPos = editor.state.selection.$from\n    const isAtEnd = currentPos.pos === currentPos.end()\n\n    if (isAtEnd) {\n      const currentMarks = currentPos.marks()\n      const isInMark = !!currentMarks.find(m => m?.type.name === mark.name)\n\n      if (!isInMark) {\n        return false\n      }\n\n      const removeMark = currentMarks.find(m => m?.type.name === mark.name)\n\n      if (removeMark) {\n        tr.removeStoredMark(removeMark)\n      }\n      tr.insertText(' ', currentPos.pos)\n\n      editor.view.dispatch(tr)\n\n      return true\n    }\n\n    return false\n  }\n}\n","export function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n","import { Fragment, Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { EditorState, Plugin } from '@tiptap/pm/state'\n\nimport { CommandManager } from './CommandManager.js'\nimport { Editor } from './Editor.js'\nimport { createChainableState } from './helpers/createChainableState.js'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment.js'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types.js'\nimport { isNumber } from './utilities/isNumber.js'\nimport { isRegExp } from './utilities/isRegExp.js'\n\nexport type PasteRuleMatch = {\n  index: number;\n  text: string;\n  replaceWith?: string;\n  match?: RegExpMatchArray;\n  data?: Record<string, any>;\n};\n\nexport type PasteRuleFinder =\n  | RegExp\n  | ((text: string, event?: ClipboardEvent | null) => PasteRuleMatch[] | null | undefined);\n\n/**\n * Paste rules are used to react to pasted content.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nexport class PasteRule {\n  find: PasteRuleFinder\n\n  handler: (props: {\n    state: EditorState;\n    range: Range;\n    match: ExtendedRegExpMatchArray;\n    commands: SingleCommands;\n    chain: () => ChainedCommands;\n    can: () => CanCommands;\n    pasteEvent: ClipboardEvent | null;\n    dropEvent: DragEvent | null;\n  }) => void | null\n\n  constructor(config: {\n    find: PasteRuleFinder;\n    handler: (props: {\n      can: () => CanCommands;\n      chain: () => ChainedCommands;\n      commands: SingleCommands;\n      dropEvent: DragEvent | null;\n      match: ExtendedRegExpMatchArray;\n      pasteEvent: ClipboardEvent | null;\n      range: Range;\n      state: EditorState;\n    }) => void | null;\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst pasteRuleMatcherHandler = (\n  text: string,\n  find: PasteRuleFinder,\n  event?: ClipboardEvent | null,\n): ExtendedRegExpMatchArray[] => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)]\n  }\n\n  const matches = find(text, event)\n\n  if (!matches) {\n    return []\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result: ExtendedRegExpMatchArray = [pasteRuleMatch.text]\n\n    result.index = pasteRuleMatch.index\n    result.input = text\n    result.data = pasteRuleMatch.data\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn(\n          '[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".',\n        )\n      }\n\n      result.push(pasteRuleMatch.replaceWith)\n    }\n\n    return result\n  })\n}\n\nfunction run(config: {\n  editor: Editor;\n  state: EditorState;\n  from: number;\n  to: number;\n  rule: PasteRule;\n  pasteEvent: ClipboardEvent | null;\n  dropEvent: DragEvent | null;\n}): boolean {\n  const {\n    editor, state, from, to, rule, pasteEvent, dropEvent,\n  } = config\n\n  const { commands, chain, can } = new CommandManager({\n    editor,\n    state,\n  })\n\n  const handlers: (void | null)[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return\n    }\n\n    const resolvedFrom = Math.max(from, pos)\n    const resolvedTo = Math.min(to, pos + node.content.size)\n    const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc')\n\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent)\n\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return\n      }\n\n      const start = resolvedFrom + match.index + 1\n      const end = start + match[0].length\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end),\n      }\n\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n        pasteEvent,\n        dropEvent,\n      })\n\n      handlers.push(handler)\n    })\n  })\n\n  const success = handlers.every(handler => handler !== null)\n\n  return success\n}\n\n// When dragging across editors, must get another editor instance to delete selection content.\nlet tiptapDragFromOtherEditor: Editor | null = null\n\nconst createClipboardPasteEvent = (text: string) => {\n  const event = new ClipboardEvent('paste', {\n    clipboardData: new DataTransfer(),\n  })\n\n  event.clipboardData?.setData('text/html', text)\n\n  return event\n}\n\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function pasteRulesPlugin(props: { editor: Editor; rules: PasteRule[] }): Plugin[] {\n  const { editor, rules } = props\n  let dragSourceElement: Element | null = null\n  let isPastedFromProseMirror = false\n  let isDroppedFromProseMirror = false\n  let pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null\n  let dropEvent: DragEvent | null\n\n  try {\n    dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null\n  } catch {\n    dropEvent = null\n  }\n\n  const processEvent = ({\n    state,\n    from,\n    to,\n    rule,\n    pasteEvt,\n  }: {\n    state: EditorState;\n    from: number;\n    to: { b: number };\n    rule: PasteRule;\n    pasteEvt: ClipboardEvent | null;\n  }) => {\n    const tr = state.tr\n    const chainableState = createChainableState({\n      state,\n      transaction: tr,\n    })\n\n    const handler = run({\n      editor,\n      state: chainableState,\n      from: Math.max(from - 1, 0),\n      to: to.b - 1,\n      rule,\n      pasteEvent: pasteEvt,\n      dropEvent,\n    })\n\n    if (!handler || !tr.steps.length) {\n      return\n    }\n\n    try {\n      dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null\n    } catch {\n      dropEvent = null\n    }\n    pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null\n\n    return tr\n  }\n\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = (event: DragEvent) => {\n          dragSourceElement = view.dom.parentElement?.contains(event.target as Element)\n            ? view.dom.parentElement\n            : null\n\n          if (dragSourceElement) {\n            tiptapDragFromOtherEditor = editor\n          }\n        }\n\n        const handleDragend = () => {\n          if (tiptapDragFromOtherEditor) {\n            tiptapDragFromOtherEditor = null\n          }\n        }\n\n        window.addEventListener('dragstart', handleDragstart)\n        window.addEventListener('dragend', handleDragend)\n\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart)\n            window.removeEventListener('dragend', handleDragend)\n          },\n        }\n      },\n\n      props: {\n        handleDOMEvents: {\n          drop: (view, event: Event) => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement\n            dropEvent = event as DragEvent\n\n            if (!isDroppedFromProseMirror) {\n              const dragFromOtherEditor = tiptapDragFromOtherEditor\n\n              if (dragFromOtherEditor) {\n                // setTimeout to avoid the wrong content after drop, timeout arg can't be empty or 0\n                setTimeout(() => {\n                  const selection = dragFromOtherEditor.state.selection\n\n                  if (selection) {\n                    dragFromOtherEditor.commands.deleteRange({ from: selection.from, to: selection.to })\n                  }\n                }, 10)\n              }\n            }\n            return false\n          },\n\n          paste: (_view, event: Event) => {\n            const html = (event as ClipboardEvent).clipboardData?.getData('text/html')\n\n            pasteEvent = event as ClipboardEvent\n\n            isPastedFromProseMirror = !!html?.includes('data-pm-slice')\n\n            return false\n          },\n        },\n      },\n\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0]\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror\n\n        // if PasteRule is triggered by insertContent()\n        const simulatedPasteMeta = transaction.getMeta('applyPasteRules') as\n          | undefined\n          | { from: number; text: string | ProseMirrorNode | Fragment }\n        const isSimulatedPaste = !!simulatedPasteMeta\n\n        if (!isPaste && !isDrop && !isSimulatedPaste) {\n          return\n        }\n\n        // Handle simulated paste\n        if (isSimulatedPaste) {\n          let { text } = simulatedPasteMeta\n\n          if (typeof text === 'string') {\n            text = text as string\n          } else {\n            text = getHTMLFromFragment(Fragment.from(text), state.schema)\n          }\n\n          const { from } = simulatedPasteMeta\n          const to = from + text.length\n\n          const pasteEvt = createClipboardPasteEvent(text)\n\n          return processEvent({\n            rule,\n            state,\n            from,\n            to: { b: to },\n            pasteEvt,\n          })\n        }\n\n        // handle actual paste/drop\n        const from = oldState.doc.content.findDiffStart(state.doc.content)\n        const to = oldState.doc.content.findDiffEnd(state.doc.content)\n\n        // stop if there is no changed range\n        if (!isNumber(from) || !to || from === to.b) {\n          return\n        }\n\n        return processEvent({\n          rule,\n          state,\n          from,\n          to,\n          pasteEvt: pasteEvent,\n        })\n      },\n    })\n  })\n\n  return plugins\n}\n","export function findDuplicates(items: any[]): any[] {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index)\n\n  return Array.from(new Set(filtered))\n}\n","import { keymap } from '@tiptap/pm/keymap'\nimport { Schema } from '@tiptap/pm/model'\nimport { Plugin } from '@tiptap/pm/state'\nimport { NodeViewConstructor } from '@tiptap/pm/view'\n\nimport type { Editor } from './Editor.js'\nimport { getAttributesFromExtensions } from './helpers/getAttributesFromExtensions.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { getNodeType } from './helpers/getNodeType.js'\nimport { getRenderedAttributes } from './helpers/getRenderedAttributes.js'\nimport { getSchemaByResolvedExtensions } from './helpers/getSchemaByResolvedExtensions.js'\nimport { getSchemaTypeByName } from './helpers/getSchemaTypeByName.js'\nimport { isExtensionRulesEnabled } from './helpers/isExtensionRulesEnabled.js'\nimport { splitExtensions } from './helpers/splitExtensions.js'\nimport type { NodeConfig } from './index.js'\nimport { InputRule, inputRulesPlugin } from './InputRule.js'\nimport { Mark } from './Mark.js'\nimport { PasteRule, pasteRulesPlugin } from './PasteRule.js'\nimport { AnyConfig, Extensions, RawCommands } from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { findDuplicates } from './utilities/findDuplicates.js'\n\nexport class ExtensionManager {\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions, editor)\n    this.setupExtensions()\n  }\n\n  /**\n   * Returns a flattened and sorted extension list while\n   * also checking for duplicated extensions and warns the user.\n   * @param extensions An array of Tiptap extensions\n   * @returns An flattened and sorted array of Tiptap extensions\n   */\n  static resolve(extensions: Extensions): Extensions {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions))\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name))\n\n    if (duplicatedNames.length) {\n      console.warn(\n        `[tiptap warn]: Duplicate extension names found: [${duplicatedNames\n          .map(item => `'${item}'`)\n          .join(', ')}]. This can lead to issues.`,\n      )\n    }\n\n    return resolvedExtensions\n  }\n\n  /**\n   * Create a flattened array of extensions by traversing the `addExtensions` field.\n   * @param extensions An array of Tiptap extensions\n   * @returns A flattened array of Tiptap extensions\n   */\n  static flatten(extensions: Extensions): Extensions {\n    return (\n      extensions\n        .map(extension => {\n          const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n          }\n\n          const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n            extension,\n            'addExtensions',\n            context,\n          )\n\n          if (addExtensions) {\n            return [extension, ...this.flatten(addExtensions())]\n          }\n\n          return extension\n        })\n        // `Infinity` will break TypeScript so we set a number that is probably high enough\n        .flat(10)\n    )\n  }\n\n  /**\n   * Sort extensions by priority.\n   * @param extensions An array of Tiptap extensions\n   * @returns A sorted array of Tiptap extensions by priority\n   */\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  /**\n   * Get all commands from the extensions.\n   * @returns An object with all commands where the key is the command name and the value is the command function\n   */\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  /**\n   * Get all registered Prosemirror plugins from the extensions.\n   * @returns An array of Prosemirror plugins\n   */\n  get plugins(): Plugin[] {\n    const { editor } = this\n\n    // With ProseMirror, first plugins within an array are executed first.\n    // In Tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse())\n\n    const inputRules: InputRule[] = []\n    const pasteRules: PasteRule[] = []\n\n    const allPlugins = extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        let defaultBindings: Record<string, () => boolean> = {}\n\n        // bind exit handling\n        if (extension.type === 'mark' && getExtensionField<AnyConfig['exitable']>(extension, 'exitable', context)) {\n          defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: extension as Mark })\n        }\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {\n              return [shortcut, () => method({ editor })]\n            }),\n          )\n\n          defaultBindings = { ...defaultBindings, ...bindings }\n        }\n\n        const keyMapPlugin = keymap(defaultBindings)\n\n        plugins.push(keyMapPlugin)\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push(...addInputRules())\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push(...addPasteRules())\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n\n    return [\n      inputRulesPlugin({\n        editor,\n        rules: inputRules,\n      }),\n      ...pasteRulesPlugin({\n        editor,\n        rules: pasteRules,\n      }),\n      ...allPlugins,\n    ]\n  }\n\n  /**\n   * Get all attributes from the extensions.\n   * @returns An array of attributes\n   */\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  /**\n   * Get all node views from the extensions.\n   * @returns An object with all node views where the key is the node name and the value is the node view function\n   */\n  get nodeViews(): Record<string, NodeViewConstructor> {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(\n      nodeExtensions\n        .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n        .map(extension => {\n          const extensionAttributes = this.attributes.filter(\n            attribute => attribute.type === extension.name,\n          )\n          const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor,\n            type: getNodeType(extension.name, this.schema),\n          }\n          const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n            extension,\n            'addNodeView',\n            context,\n          )\n\n          if (!addNodeView) {\n            return []\n          }\n\n          const nodeview: NodeViewConstructor = (\n            node,\n            view,\n            getPos,\n            decorations,\n            innerDecorations,\n          ) => {\n            const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n            return addNodeView()({\n              // pass-through\n              node,\n              view,\n              getPos: getPos as () => number,\n              decorations,\n              innerDecorations,\n              // tiptap-specific\n              editor,\n              extension,\n              HTMLAttributes,\n            })\n          }\n\n          return [extension.name, nodeview]\n        }),\n    )\n  }\n\n  /**\n   * Go through all extensions, create extension storages & setup marks\n   * & bind editor event listener.\n   */\n  private setupExtensions() {\n    this.extensions.forEach(extension => {\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage\n\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(extension, 'onCreate', context)\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(extension, 'onUpdate', context)\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(extension, 'onFocus', context)\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(extension, 'onBlur', context)\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(extension, 'onDestroy', context)\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n}\n","import { Plugin, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { ExtensionConfig } from './index.js'\nimport { InputRule } from './InputRule.js'\nimport { Mark } from './Mark.js'\nimport { Node } from './Node.js'\nimport { PasteRule } from './PasteRule.js'\nimport {\n  AnyConfig,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { mergeDeep } from './utilities/mergeDeep.js'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any, Storage = any> {\n    // @ts-ignore - this is a dynamic key\n    [key: string]: any\n\n    /**\n     * The extension name - this must be unique.\n     * It will be used to identify the extension.\n     *\n     * @example 'myExtension'\n     */\n    name: string\n\n    /**\n     * The priority of your extension. The higher, the earlier it will be called\n     * and will take precedence over other extensions with a lower priority.\n     * @default 100\n     * @example 101\n     */\n    priority?: number\n\n    /**\n     * The default options for this extension.\n     * @example\n     * defaultOptions: {\n     *   myOption: 'foo',\n     *   myOtherOption: 10,\n     * }\n     */\n    defaultOptions?: Options\n\n    /**\n     * This method will add options to this extension\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#settings\n     * @example\n     * addOptions() {\n     *  return {\n     *    myOption: 'foo',\n     *    myOtherOption: 10,\n     * }\n     */\n    addOptions?: (this: {\n      name: string\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addOptions'], undefined>\n    }) => Options\n\n    /**\n     * The default storage this extension can save data to.\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#storage\n     * @example\n     * defaultStorage: {\n     *   prefetchedUsers: [],\n     *   loading: false,\n     * }\n     */\n    addStorage?: (this: {\n      name: string\n      options: Options\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addStorage'], undefined>\n    }) => Storage\n\n    /**\n     * This function adds globalAttributes to specific nodes.\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#global-attributes\n     * @example\n     * addGlobalAttributes() {\n     *   return [\n     *     {\n             // Extend the following extensions\n     *       types: [\n     *         'heading',\n     *         'paragraph',\n     *       ],\n     *       // … with those attributes\n     *       attributes: {\n     *         textAlign: {\n     *           default: 'left',\n     *           renderHTML: attributes => ({\n     *             style: `text-align: ${attributes.textAlign}`,\n     *           }),\n     *           parseHTML: element => element.style.textAlign || 'left',\n     *         },\n     *       },\n     *     },\n     *   ]\n     * }\n     */\n    addGlobalAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      extensions: (Node | Mark)[]\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addGlobalAttributes']\n    }) => GlobalAttributes\n\n    /**\n     * This function adds commands to the editor\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#commands\n     * @example\n     * addCommands() {\n     *   return {\n     *     myCommand: () => ({ chain }) => chain().setMark('type', 'foo').run(),\n     *   }\n     * }\n     */\n    addCommands?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addCommands']\n    }) => Partial<RawCommands>\n\n    /**\n     * This function registers keyboard shortcuts.\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addKeyboardShortcuts() {\n     *   return {\n     *     'Mod-l': () => this.editor.commands.toggleBulletList(),\n     *   }\n     * },\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addKeyboardShortcuts']\n    }) => {\n      [key: string]: KeyboardShortcutCommand\n    }\n\n    /**\n     * This function adds input rules to the editor.\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#input-rules\n     * @example\n     * addInputRules() {\n     *   return [\n     *     markInputRule({\n     *       find: inputRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addInputRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addInputRules']\n    }) => InputRule[]\n\n    /**\n     * This function adds paste rules to the editor.\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#paste-rules\n     * @example\n     * addPasteRules() {\n     *   return [\n     *     markPasteRule({\n     *       find: pasteRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addPasteRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addPasteRules']\n    }) => PasteRule[]\n\n    /**\n     * This function adds Prosemirror plugins to the editor\n     * @see https://tiptap.dev/docs/editor/guide/custom-extensions#prosemirror-plugins\n     * @example\n     * addProseMirrorPlugins() {\n     *   return [\n     *     customPlugin(),\n     *   ]\n     * }\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addProseMirrorPlugins']\n    }) => Plugin[]\n\n    /**\n     * This function adds additional extensions to the editor. This is useful for\n     * building extension kits.\n     * @example\n     * addExtensions() {\n     *   return [\n     *     BulletList,\n     *     OrderedList,\n     *     ListItem\n     *   ]\n     * }\n     */\n    addExtensions?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addExtensions']\n    }) => Extensions\n\n    /**\n     * This function extends the schema of the node.\n     * @example\n     * extendNodeSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendNodeSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendNodeSchema']\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * This function extends the schema of the mark.\n     * @example\n     * extendMarkSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendMarkSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendMarkSchema']\n          },\n          extension: Mark,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBeforeCreate']\n        }) => void)\n      | null\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onCreate']\n        }) => void)\n      | null\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onSelectionUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['onTransaction']\n          },\n          props: {\n            editor: Editor\n            transaction: Transaction\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['onFocus']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBlur']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onDestroy']\n        }) => void)\n      | null\n  }\n}\n\n/**\n * The Extension class is the base class for all extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nexport class Extension<Options = any, Storage = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`,\n      )\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(\n        getExtensionField<AnyConfig['addOptions']>(this, 'addOptions', {\n          name: this.name,\n        }),\n      )\n    }\n\n    this.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(this, 'addStorage', {\n        name: this.name,\n        options: this.options,\n      }),\n    ) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<ExtensionConfig<O, S>> = {}) {\n    return new Extension<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend<Options, Storage>({\n      ...this.config,\n      addOptions: () => {\n        return mergeDeep(this.options as Record<string, any>, options) as Options\n      },\n    })\n\n    // Always preserve the current name\n    extension.name = this.name\n    // Set the parent to be our parent\n    extension.parent = this.parent\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(\n    extendedConfig: Partial<ExtensionConfig<ExtendedOptions, ExtendedStorage>> = {},\n  ) {\n    const extension = new Extension<ExtendedOptions, ExtendedStorage>({ ...this.config, ...extendedConfig })\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name\n\n    if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`,\n      )\n    }\n\n    extension.options = callOrReturn(\n      getExtensionField<AnyConfig['addOptions']>(extension, 'addOptions', {\n        name: extension.name,\n      }),\n    )\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { Range, TextSerializer } from '../types.js'\n\n/**\n * Gets the text between two positions in a Prosemirror node\n * and serializes it using the given text serializers and block separator (see getText)\n * @param startNode The Prosemirror node to start from\n * @param range The range of the text to get\n * @param options Options for the text serializer & block separator\n * @returns The text between the two positions\n */\nexport function getTextBetween(\n  startNode: ProseMirrorNode,\n  range: Range,\n  options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  },\n): string {\n  const { from, to } = range\n  const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {}\n  let text = ''\n\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    if (node.isBlock && pos > from) {\n      text += blockSeparator\n    }\n\n    const textSerializer = textSerializers?.[node.type.name]\n\n    if (textSerializer) {\n      if (parent) {\n        text += textSerializer({\n          node,\n          pos,\n          parent,\n          index,\n          range,\n        })\n      }\n      // do not descend into child nodes when there exists a serializer\n      return false\n    }\n\n    if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos) // eslint-disable-line\n    }\n  })\n\n  return text\n}\n","import { Schema } from '@tiptap/pm/model'\n\nimport { TextSerializer } from '../types.js'\n\n/**\n * Find text serializers `toText` in a Prosemirror schema\n * @param schema The Prosemirror schema to search in\n * @returns A record of text serializers by node name\n */\nexport function getTextSerializersFromSchema(schema: Schema): Record<string, TextSerializer> {\n  return Object.fromEntries(\n    Object.entries(schema.nodes)\n      .filter(([, node]) => node.spec.toText)\n      .map(([name, node]) => [name, node.spec.toText]),\n  )\n}\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\nimport { getTextBetween } from '../helpers/getTextBetween.js'\nimport { getTextSerializersFromSchema } from '../helpers/getTextSerializersFromSchema.js'\n\nexport type ClipboardTextSerializerOptions = {\n  blockSeparator?: string,\n}\n\nexport const ClipboardTextSerializer = Extension.create<ClipboardTextSerializerOptions>({\n  name: 'clipboardTextSerializer',\n\n  addOptions() {\n    return {\n      blockSeparator: undefined,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { state, schema } = editor\n            const { doc, selection } = state\n            const { ranges } = selection\n            const from = Math.min(...ranges.map(range => range.$from.pos))\n            const to = Math.max(...ranges.map(range => range.$to.pos))\n            const textSerializers = getTextSerializersFromSchema(schema)\n            const range = { from, to }\n\n            return getTextBetween(doc, range, {\n              ...(this.options.blockSeparator !== undefined\n                ? { blockSeparator: this.options.blockSeparator }\n                : {}),\n              textSerializers,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       * @example editor.commands.blur()\n       */\n      blur: () => ReturnType,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ editor, view }) => {\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      (view.dom as HTMLElement).blur()\n\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      window?.getSelection()?.removeAllRanges()\n    }\n  })\n\n  return true\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       * @param emitUpdate Whether to emit an update event.\n       * @example editor.commands.clearContent()\n       */\n      clearContent: (emitUpdate?: boolean) => ReturnType,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n","import { liftTarget } from '@tiptap/pm/transform'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       * @example editor.commands.clearNodes()\n       */\n      clearNodes: () => ReturnType,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  ranges.forEach(({ $from, $to }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const { doc, mapping } = tr\n      const $mappedFrom = doc.resolve(mapping.map(pos))\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize))\n      const nodeRange = $mappedFrom.blockRange($mappedTo)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock) {\n        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n","import { Command, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    command: {\n      /**\n       * Define a command inline.\n       * @param fn The command function.\n       * @example\n       * editor.commands.command(({ tr, state }) => {\n       *   ...\n       *   return true\n       * })\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => ReturnType,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n","import { createParagraphNear as originalCreateParagraphNear } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       * @example editor.commands.createParagraphNear()\n       */\n      createParagraphNear: () => ReturnType\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n","import { TextSelection } from '@tiptap/pm/state'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    cut: {\n      /**\n       * Cuts content from a range and inserts it at a given position.\n       * @param range The range to cut.\n       * @param range.from The start position of the range.\n       * @param range.to The end position of the range.\n       * @param targetPos The position to insert the content at.\n       * @example editor.commands.cut({ from: 1, to: 3 }, 5)\n       */\n      cut: ({ from, to }: { from: number, to: number }, targetPos: number) => ReturnType,\n    }\n  }\n}\n\nexport const cut: RawCommands['cut'] = (originRange, targetPos) => ({ editor, tr }) => {\n  const { state } = editor\n\n  const contentSlice = state.doc.slice(originRange.from, originRange.to)\n\n  tr.deleteRange(originRange.from, originRange.to)\n  const newPos = tr.mapping.map(targetPos)\n\n  tr.insert(newPos, contentSlice.content)\n\n  tr.setSelection(new TextSelection(tr.doc.resolve(newPos - 1)))\n\n  return true\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteCurrentNode: {\n      /**\n       * Delete the node that currently has the selection anchor.\n       * @example editor.commands.deleteCurrentNode()\n       */\n      deleteCurrentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteCurrentNode: RawCommands['deleteCurrentNode'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const currentNode = selection.$anchor.node()\n\n  // if there is content inside the current node, break out of this command\n  if (currentNode.content.size > 0) {\n    return false\n  }\n\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === currentNode.type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteNode: {\n      /**\n       * Delete a node with a given type or name.\n       * @param typeOrName The type or name of the node.\n       * @example editor.commands.deleteNode('paragraph')\n       */\n      deleteNode: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const deleteNode: RawCommands['deleteNode'] = typeOrName => ({ tr, state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { Range, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       * @param range The range to delete.\n       * @example editor.commands.deleteRange({ from: 1, to: 3 })\n       */\n      deleteRange: (range: Range) => ReturnType,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n","import { deleteSelection as originalDeleteSelection } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       * @example editor.commands.deleteSelection()\n       */\n      deleteSelection: () => ReturnType\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    enter: {\n      /**\n       * Trigger enter.\n       * @example editor.commands.enter()\n       */\n      enter: () => ReturnType,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n","import { exitCode as originalExitCode } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       * @example editor.commands.exitCode()\n       */\n      exitCode: () => ReturnType\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n","import { isRegExp } from './isRegExp.js'\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport function objectIncludes(\n  object1: Record<string, any>,\n  object2: Record<string, any>,\n  options: { strict: boolean } = { strict: true },\n): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key]\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key])\n    }\n\n    return object2[key] === object1[key]\n  })\n}\n","import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from '@tiptap/pm/model'\n\nimport { Range } from '../types.js'\nimport { objectIncludes } from '../utilities/objectIncludes.js'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return (\n      item.type === type\n      && objectIncludes(\n        // Only check equality for the attributes that are provided\n        Object.fromEntries(Object.keys(attributes).map(k => [k, item.attrs[k]])),\n        attributes,\n      )\n    )\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\n/**\n * Get the range of a mark at a resolved position.\n */\nexport function getMarkRange(\n  /**\n   * The position to get the mark range for.\n   */\n  $pos: ResolvedPos,\n  /**\n   * The mark type to get the range for.\n   */\n  type: MarkType,\n  /**\n   * The attributes to match against.\n   * If not provided, only the first mark at the position will be matched.\n   */\n  attributes?: Record<string, any>,\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n  let start = $pos.parent.childAfter($pos.parentOffset)\n\n  // If the cursor is at the start of a text node that does not have the mark, look backward\n  if (!start.node || !start.node.marks.some(mark => mark.type === type)) {\n    start = $pos.parent.childBefore($pos.parentOffset)\n  }\n\n  // If there is no text node with the mark even backward, return undefined\n  if (!start.node || !start.node.marks.some(mark => mark.type === type)) {\n    return\n  }\n\n  // Default to only matching against the first mark's attributes\n  attributes = attributes || start.node.marks[0]?.attrs\n\n  // We now know that the cursor is either at the start, middle or end of a text node with the specified mark\n  // so we can look it up on the targeted mark\n  const mark = findMarkInSet([...start.node.marks], type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = start.index\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  while (\n    startIndex > 0\n    && isMarkInSet([...$pos.parent.child(startIndex - 1).marks], type, attributes)\n  ) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n","import { MarkType, Schema } from '@tiptap/pm/model'\n\nexport function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(\n        `There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`,\n      )\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n","import { MarkType } from '@tiptap/pm/model'\nimport { TextSelection } from '@tiptap/pm/state'\n\nimport { getMarkRange } from '../helpers/getMarkRange.js'\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark by type or name.\n       * @param typeOrName The type or name of the mark.\n       * @param attributes The attributes of the mark.\n       * @example editor.commands.extendMarkRange('bold')\n       * @example editor.commands.extendMarkRange('mention', { userId: \"1\" })\n       */\n      extendMarkRange: (\n        /**\n         * The type or name of the mark.\n         */\n        typeOrName: string | MarkType,\n\n        /**\n         * The attributes of the mark.\n         */\n        attributes?: Record<string, any>,\n      ) => ReturnType\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n","import { Command, CommandProps, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       * @param commands The commands to run.\n       * @example editor.commands.first([command1, command2])\n       */\n      first: (commands: Command[] | ((props: CommandProps) => Command[])) => ReturnType,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import { TextSelection } from '@tiptap/pm/state'\n\nexport function isTextSelection(value: unknown): value is TextSelection {\n  return value instanceof TextSelection\n}\n","export function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { Selection, TextSelection } from '@tiptap/pm/state'\n\nimport { FocusPosition } from '../types.js'\nimport { minMax } from '../utilities/minMax.js'\n\nexport function resolveFocusPosition(\n  doc: ProseMirrorNode,\n  position: FocusPosition = null,\n): Selection | null {\n  if (!position) {\n    return null\n  }\n\n  const selectionAtStart = Selection.atStart(doc)\n  const selectionAtEnd = Selection.atEnd(doc)\n\n  if (position === 'start' || position === true) {\n    return selectionAtStart\n  }\n\n  if (position === 'end') {\n    return selectionAtEnd\n  }\n\n  const minPos = selectionAtStart.from\n  const maxPos = selectionAtEnd.to\n\n  if (position === 'all') {\n    return TextSelection.create(\n      doc,\n      minMax(0, minPos, maxPos),\n      minMax(doc.content.size, minPos, maxPos),\n    )\n  }\n\n  return TextSelection.create(\n    doc,\n    minMax(position, minPos, maxPos),\n    minMax(position, minPos, maxPos),\n  )\n}\n","export function isAndroid(): boolean {\n  return navigator.platform === 'Android' || /android/i.test(navigator.userAgent)\n}\n","export function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n","import { isTextSelection } from '../helpers/isTextSelection.js'\nimport { resolveFocusPosition } from '../helpers/resolveFocusPosition.js'\nimport { FocusPosition, RawCommands } from '../types.js'\nimport { isAndroid } from '../utilities/isAndroid.js'\nimport { isiOS } from '../utilities/isiOS.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       * @param position The position to focus at.\n       * @param options.scrollIntoView Scroll the focused position into view after focusing\n       * @example editor.commands.focus()\n       * @example editor.commands.focus(32, { scrollIntoView: false })\n       */\n      focus: (\n        /**\n         * The position to focus at.\n         */\n        position?: FocusPosition,\n\n        /**\n         * Optional options\n         * @default { scrollIntoView: true }\n         */\n        options?: {\n          scrollIntoView?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null, options = {}) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options,\n  }\n\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS and Android\n    // so we have to call this\n    if (isiOS() || isAndroid()) {\n      (view.dom as HTMLElement).focus()\n    }\n\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus()\n\n        if (options?.scrollIntoView) {\n          editor.commands.scrollIntoView()\n        }\n      }\n    })\n  }\n\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus()\n    return true\n  }\n\n  // pass through tr.doc instead of editor.state.doc\n  // since transactions could change the editors state before this command has been run\n  const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection)\n    }\n\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks)\n    }\n\n    delayedFocus()\n  }\n\n  return true\n}\n","import { CommandProps, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    forEach: {\n      /**\n       * Loop through an array of items.\n       */\n      forEach: <T>(\n        items: T[],\n        fn: (\n          item: T,\n          props: CommandProps & {\n            index: number,\n          },\n        ) => boolean,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const forEach: RawCommands['forEach'] = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props, index }))\n}\n","import { Fragment, Node as ProseMirrorNode, ParseOptions } from '@tiptap/pm/model'\n\nimport { Content, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       * @example editor.commands.insertContent('<h1>Example</h1>')\n       * @example editor.commands.insertContent('<h1>Example</h1>', { updateSelection: false })\n       */\n      insertContent: (\n        /**\n         * The ProseMirror content to insert.\n         */\n        value: Content | ProseMirrorNode | Fragment,\n\n        /**\n         * Optional options\n         */\n        options?: {\n          /**\n           * Options for parsing the content.\n           */\n          parseOptions?: ParseOptions;\n\n          /**\n           * Whether to update the selection after inserting the content.\n           */\n          updateSelection?: boolean;\n          applyInputRules?: boolean;\n          applyPasteRules?: boolean;\n        }\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = (value, options) => ({ tr, commands }) => {\n  return commands.insertContentAt(\n    { from: tr.selection.from, to: tr.selection.to },\n    value,\n    options,\n  )\n}\n","const removeWhitespaces = (node: HTMLElement) => {\n  const children = node.childNodes\n\n  for (let i = children.length - 1; i >= 0; i -= 1) {\n    const child = children[i]\n\n    if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n      node.removeChild(child)\n    } else if (child.nodeType === 1) {\n      removeWhitespaces(child as HTMLElement)\n    }\n  }\n\n  return node\n}\n\nexport function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  const html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n\n  return removeWhitespaces(html)\n}\n","import {\n  DOMParser,\n  Fragment,\n  Node as ProseMirrorNode,\n  ParseOptions,\n  Schema,\n} from '@tiptap/pm/model'\n\nimport { Content } from '../types.js'\nimport { elementFromString } from '../utilities/elementFromString.js'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean\n  parseOptions?: ParseOptions\n  errorOnInvalidContent?: boolean\n}\n\n/**\n * Takes a JSON or HTML content and creates a Prosemirror node or fragment from it.\n * @param content The JSON or HTML content to create the node from\n * @param schema The Prosemirror schema to use for the node\n * @param options Options for the parser\n * @returns The created Prosemirror node or fragment\n */\nexport function createNodeFromContent(\n  content: Content | ProseMirrorNode | Fragment,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  if (content instanceof ProseMirrorNode || content instanceof Fragment) {\n    return content\n  }\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  const isJSONContent = typeof content === 'object' && content !== null\n  const isTextContent = typeof content === 'string'\n\n  if (isJSONContent) {\n    try {\n      const isArrayContent = Array.isArray(content) && content.length > 0\n\n      // if the JSON Content is an array of nodes, create a fragment for each node\n      if (isArrayContent) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      const node = schema.nodeFromJSON(content)\n\n      if (options.errorOnInvalidContent) {\n        node.check()\n      }\n\n      return node\n    } catch (error) {\n      if (options.errorOnInvalidContent) {\n        throw new Error('[tiptap error]: Invalid JSON content', { cause: error as Error })\n      }\n\n      console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error)\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (isTextContent) {\n\n    // Check for invalid content\n    if (options.errorOnInvalidContent) {\n      let hasInvalidContent = false\n      let invalidContent = ''\n\n      // A copy of the current schema with a catch-all node at the end\n      const contentCheckSchema = new Schema({\n        topNode: schema.spec.topNode,\n        marks: schema.spec.marks,\n        // Prosemirror's schemas are executed such that: the last to execute, matches last\n        // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle\n        nodes: schema.spec.nodes.append({\n          __tiptap__private__unknown__catch__all__node: {\n            content: 'inline*',\n            group: 'block',\n            parseDOM: [\n              {\n                tag: '*',\n                getAttrs: e => {\n                  // If this is ever called, we know that the content has something that we don't know how to handle in the schema\n                  hasInvalidContent = true\n                  // Try to stringify the element for a more helpful error message\n                  invalidContent = typeof e === 'string' ? e : e.outerHTML\n                  return null\n                },\n              },\n            ],\n          },\n        }),\n      })\n\n      if (options.slice) {\n        DOMParser.fromSchema(contentCheckSchema).parseSlice(elementFromString(content), options.parseOptions)\n      } else {\n        DOMParser.fromSchema(contentCheckSchema).parse(elementFromString(content), options.parseOptions)\n      }\n\n      if (options.errorOnInvalidContent && hasInvalidContent) {\n        throw new Error('[tiptap error]: Invalid HTML content', { cause: new Error(`Invalid element found: ${invalidContent}`) })\n      }\n    }\n\n    const parser = DOMParser.fromSchema(schema)\n\n    if (options.slice) {\n      return parser.parseSlice(elementFromString(content), options.parseOptions).content\n    }\n\n    return parser.parse(elementFromString(content), options.parseOptions)\n\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n","import { Selection, Transaction } from '@tiptap/pm/state'\nimport { ReplaceAroundStep, ReplaceStep } from '@tiptap/pm/transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import { Fragment, Node as ProseMirrorNode, ParseOptions } from '@tiptap/pm/model'\n\nimport { createNodeFromContent } from '../helpers/createNodeFromContent.js'\nimport { selectionToInsertionEnd } from '../helpers/selectionToInsertionEnd.js'\nimport { Content, Range, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       * @example editor.commands.insertContentAt(0, '<h1>Example</h1>')\n       */\n      insertContentAt: (\n        /**\n         * The position to insert the content at.\n         */\n        position: number | Range,\n\n        /**\n         * The ProseMirror content to insert.\n         */\n        value: Content | ProseMirrorNode | Fragment,\n\n        /**\n         * Optional options\n         */\n        options?: {\n          /**\n           * Options for parsing the content.\n           */\n          parseOptions?: ParseOptions\n\n          /**\n           * Whether to update the selection after inserting the content.\n           */\n          updateSelection?: boolean\n\n          /**\n           * Whether to apply input rules after inserting the content.\n           */\n          applyInputRules?: boolean\n\n          /**\n           * Whether to apply paste rules after inserting the content.\n           */\n          applyPasteRules?: boolean\n\n          /**\n           * Whether to throw an error if the content is invalid.\n           */\n          errorOnInvalidContent?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\nconst isFragment = (nodeOrFragment: ProseMirrorNode | Fragment): nodeOrFragment is Fragment => {\n  return !('type' in nodeOrFragment)\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value, options) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    options = {\n      parseOptions: editor.options.parseOptions,\n      updateSelection: true,\n      applyInputRules: false,\n      applyPasteRules: false,\n      ...options,\n    }\n\n    let content: Fragment | ProseMirrorNode\n\n    try {\n      content = createNodeFromContent(value, editor.schema, {\n        parseOptions: {\n          preserveWhitespace: 'full',\n          ...options.parseOptions,\n        },\n        errorOnInvalidContent: options.errorOnInvalidContent ?? editor.options.enableContentCheck,\n      })\n    } catch (e) {\n      editor.emit('contentError', {\n        editor,\n        error: e as Error,\n        disableCollaboration: () => {\n          if (editor.storage.collaboration) {\n            editor.storage.collaboration.isDisabled = true\n          }\n        },\n      })\n      return false\n    }\n\n    let { from, to } = typeof position === 'number' ? { from: position, to: position } : { from: position.from, to: position.to }\n\n    let isOnlyTextContent = true\n    let isOnlyBlockContent = true\n    const nodes = isFragment(content) ? content : [content]\n\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check()\n\n      isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false\n\n      isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false\n    })\n\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const { parent } = tr.doc.resolve(from)\n      const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount\n\n      if (isEmptyTextBlock) {\n        from -= 1\n        to += 1\n      }\n    }\n\n    let newContent\n\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      // if value is string, we can use it directly\n      // otherwise if it is an array, we have to join it\n      if (Array.isArray(value)) {\n        newContent = value.map(v => v.text || '').join('')\n      } else if (value instanceof Fragment) {\n        let text = ''\n\n        value.forEach(node => {\n          if (node.text) {\n            text += node.text\n          }\n        })\n\n        newContent = text\n      } else if (typeof value === 'object' && !!value && !!value.text) {\n        newContent = value.text\n      } else {\n        newContent = value as string\n      }\n\n      tr.insertText(newContent, from, to)\n    } else {\n      newContent = content\n\n      tr.replaceWith(from, to, newContent)\n    }\n\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n    }\n\n    if (options.applyInputRules) {\n      tr.setMeta('applyInputRules', { from, text: newContent })\n    }\n\n    if (options.applyPasteRules) {\n      tr.setMeta('applyPasteRules', { from, text: newContent })\n    }\n  }\n\n  return true\n}\n","import {\n  joinBackward as originalJoinBackward,\n  joinDown as originalJoinDown,\n  joinForward as originalJoinForward,\n  joinUp as originalJoinUp,\n} from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinUp: {\n      /**\n       * Join the selected block or, if there is a text selection, the closest ancestor block of the selection that can be joined, with the sibling above it.\n       * @example editor.commands.joinUp()\n       */\n      joinUp: () => ReturnType\n    }\n    joinDown: {\n      /**\n       * Join the selected block, or the closest ancestor of the selection that can be joined, with the sibling after it.\n       * @example editor.commands.joinDown()\n       */\n      joinDown: () => ReturnType\n    }\n    joinBackward: {\n      /**\n       * If the selection is empty and at the start of a textblock, try to reduce the distance between that block and the one before it—if there's a block directly before it that can be joined, join them.\n       * If not, try to move the selected block closer to the next one in the document structure by lifting it out of its\n       * parent or moving it into a parent of the previous block. Will use the view for accurate (bidi-aware) start-of-textblock detection if given.\n       * @example editor.commands.joinBackward()\n       */\n      joinBackward: () => ReturnType\n    }\n    joinForward: {\n      /**\n       * If the selection is empty and the cursor is at the end of a textblock, try to reduce or remove the boundary between that block and the one after it,\n       * either by joining them or by moving the other block closer to this one in the tree structure.\n       * Will use the view for accurate start-of-textblock detection if given.\n       * @example editor.commands.joinForward()\n       */\n      joinForward: () => ReturnType\n    }\n  }\n}\n\nexport const joinUp: RawCommands['joinUp'] = () => ({ state, dispatch }) => {\n  return originalJoinUp(state, dispatch)\n}\n\nexport const joinDown: RawCommands['joinDown'] = () => ({ state, dispatch }) => {\n  return originalJoinDown(state, dispatch)\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n","import { joinPoint } from '@tiptap/pm/transform'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinItemBackward: {\n      /**\n       * Join two items backward.\n       * @example editor.commands.joinItemBackward()\n       */\n      joinItemBackward: () => ReturnType\n    }\n  }\n}\n\nexport const joinItemBackward: RawCommands['joinItemBackward'] = () => ({\n  state,\n  dispatch,\n  tr,\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, -1)\n\n    if (point === null || point === undefined) {\n      return false\n    }\n\n    tr.join(point, 2)\n\n    if (dispatch) {\n      dispatch(tr)\n    }\n\n    return true\n  } catch {\n    return false\n  }\n}\n","import { joinPoint } from '@tiptap/pm/transform'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinItemForward: {\n      /**\n       * Join two items Forwards.\n       * @example editor.commands.joinItemForward()\n       */\n      joinItemForward: () => ReturnType\n    }\n  }\n}\n\nexport const joinItemForward: RawCommands['joinItemForward'] = () => ({\n  state,\n  dispatch,\n  tr,\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, +1)\n\n    if (point === null || point === undefined) {\n      return false\n    }\n\n    tr.join(point, 2)\n\n    if (dispatch) {\n      dispatch(tr)\n    }\n\n    return true\n  } catch {\n    return false\n  }\n}\n","import { joinTextblockBackward as originalCommand } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinTextblockBackward: {\n      /**\n       * A more limited form of joinBackward that only tries to join the current textblock to the one before it, if the cursor is at the start of a textblock.\n       */\n      joinTextblockBackward: () => ReturnType\n    }\n  }\n}\n\nexport const joinTextblockBackward: RawCommands['joinTextblockBackward'] = () => ({ state, dispatch }) => {\n  return originalCommand(state, dispatch)\n}\n","import { joinTextblockForward as originalCommand } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinTextblockForward: {\n      /**\n       * A more limited form of joinForward that only tries to join the current textblock to the one after it, if the cursor is at the end of a textblock.\n       */\n      joinTextblockForward: () => ReturnType\n    }\n  }\n}\n\nexport const joinTextblockForward: RawCommands['joinTextblockForward'] = () => ({ state, dispatch }) => {\n  return originalCommand(state, dispatch)\n}\n","export function isMacOS(): boolean {\n  return typeof navigator !== 'undefined'\n    ? /Mac/.test(navigator.platform)\n    : false\n}\n","import { RawCommands } from '../types.js'\nimport { isiOS } from '../utilities/isiOS.js'\nimport { isMacOS } from '../utilities/isMacOS.js'\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       * @param name The name of the keyboard shortcut.\n       * @example editor.commands.keyboardShortcut('Mod-b')\n       */\n      keyboardShortcut: (name: string) => ReturnType,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { NodeRange } from '../types.js'\nimport { objectIncludes } from '../utilities/objectIncludes.js'\nimport { getNodeType } from './getNodeType.js'\n\nexport function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName ? getNodeType(typeOrName, state.schema) : null\n\n  const nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return\n    }\n\n    const relativeFrom = Math.max(from, pos)\n    const relativeTo = Math.min(to, pos + node.nodeSize)\n\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo,\n    })\n  })\n\n  const selectionRange = to - from\n  const matchedNodeRanges = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }))\n\n  if (empty) {\n    return !!matchedNodeRanges.length\n  }\n\n  const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0)\n\n  return range >= selectionRange\n}\n","import { lift as originalLift } from '@tiptap/pm/commands'\nimport { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isNodeActive } from '../helpers/isNodeActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lift: {\n      /**\n       * Removes an existing wrap if possible lifting the node out of it\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.lift('paragraph')\n       * @example editor.commands.lift('heading', { level: 1 })\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n","import { liftEmptyBlock as originalLiftEmptyBlock } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftEmptyBlock: {\n      /**\n       * If the cursor is in an empty textblock that can be lifted, lift the block.\n       * @example editor.commands.liftEmptyBlock()\n       */\n      liftEmptyBlock: () => ReturnType,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { liftListItem as originalLiftListItem } from '@tiptap/pm/schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftListItem: {\n      /**\n       * Create a command to lift the list item around the selection up into a wrapping list.\n       * @param typeOrName The type or name of the node.\n       * @example editor.commands.liftListItem('listItem')\n       */\n      liftListItem: (typeOrName: string | NodeType) => ReturnType\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n","import { newlineInCode as originalNewlineInCode } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       * @example editor.commands.newlineInCode()\n       */\n      newlineInCode: () => ReturnType\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n","import { Schema } from '@tiptap/pm/model'\n\n/**\n * Get the type of a schema item by its name.\n * @param name The name of the schema item\n * @param schema The Prosemiror schema to search in\n * @returns The type of the schema item (`node` or `mark`), or null if it doesn't exist\n */\nexport function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n","/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n","import { MarkType, NodeType } from '@tiptap/pm/model'\n\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName.js'\nimport { RawCommands } from '../types.js'\nimport { deleteProps } from '../utilities/deleteProps.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node to reset.\n       * @example editor.commands.resetAttributes('heading', 'level')\n       */\n      resetAttributes: (\n        typeOrName: string | NodeType | MarkType,\n        attributes: string | string[],\n      ) => ReturnType\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string' ? typeOrName : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(\n                pos,\n                pos + node.nodeSize,\n                markType.create(deleteProps(mark.attrs, attributes)),\n              )\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       * @example editor.commands.scrollIntoView()\n       */\n      scrollIntoView: () => ReturnType,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import { AllSelection } from '@tiptap/pm/state'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectAll: {\n      /**\n       * Select the whole document.\n       * @example editor.commands.selectAll()\n       */\n      selectAll: () => ReturnType,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const selection = new AllSelection(tr.doc)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { selectNodeBackward as originalSelectNodeBackward } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       * @example editor.commands.selectNodeBackward()\n       */\n      selectNodeBackward: () => ReturnType\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n","import { selectNodeForward as originalSelectNodeForward } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       * @example editor.commands.selectNodeForward()\n       */\n      selectNodeForward: () => ReturnType\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n","import { selectParentNode as originalSelectParentNode } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       * @example editor.commands.selectParentNode()\n       */\n      selectParentNode: () => ReturnType\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockEnd as originalSelectTextblockEnd } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockEnd: {\n      /**\n       * Moves the cursor to the end of current text block.\n       * @example editor.commands.selectTextblockEnd()\n       */\n      selectTextblockEnd: () => ReturnType\n    }\n  }\n}\n\nexport const selectTextblockEnd: RawCommands['selectTextblockEnd'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockEnd(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockStart as originalSelectTextblockStart } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockStart: {\n      /**\n       * Moves the cursor to the start of current text block.\n       * @example editor.commands.selectTextblockStart()\n       */\n      selectTextblockStart: () => ReturnType\n    }\n  }\n}\n\nexport const selectTextblockStart: RawCommands['selectTextblockStart'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockStart(state, dispatch)\n}\n","import {\n  Fragment, Node as ProseMirrorNode, ParseOptions, Schema,\n} from '@tiptap/pm/model'\n\nimport { Content } from '../types.js'\nimport { createNodeFromContent } from './createNodeFromContent.js'\n\n/**\n * Create a new Prosemirror document node from content.\n * @param content The JSON or HTML content to create the document from\n * @param schema The Prosemirror schema to use for the document\n * @param parseOptions Options for the parser\n * @returns The created Prosemirror document node\n */\nexport function createDocument(\n  content: Content | ProseMirrorNode | Fragment,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n  options: { errorOnInvalidContent?: boolean } = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, {\n    slice: false,\n    parseOptions,\n    errorOnInvalidContent: options.errorOnInvalidContent,\n  }) as ProseMirrorNode\n}\n","import { Fragment, Node as ProseMirrorNode, ParseOptions } from '@tiptap/pm/model'\n\nimport { createDocument } from '../helpers/createDocument.js'\nimport { Content, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       * @param content The new content.\n       * @param emitUpdate Whether to emit an update event.\n       * @param parseOptions Options for parsing the content.\n       * @example editor.commands.setContent('<p>Example text</p>')\n       */\n      setContent: (\n        /**\n         * The new content.\n         */\n        content: Content | Fragment | ProseMirrorNode,\n\n        /**\n         * Whether to emit an update event.\n         * @default false\n         */\n        emitUpdate?: boolean,\n\n        /**\n         * Options for parsing the content.\n         * @default {}\n         */\n        parseOptions?: ParseOptions,\n        /**\n         * Options for `setContent`.\n         */\n        options?: {\n          /**\n           * Whether to throw an error if the content is invalid.\n           */\n          errorOnInvalidContent?: boolean;\n        }\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}, options = {}) => ({\n  editor, tr, dispatch, commands,\n}) => {\n  const { doc } = tr\n\n  // This is to keep backward compatibility with the previous behavior\n  // TODO remove this in the next major version\n  if (parseOptions.preserveWhitespace !== 'full') {\n    const document = createDocument(content, editor.schema, parseOptions, {\n      errorOnInvalidContent: options.errorOnInvalidContent ?? editor.options.enableContentCheck,\n    })\n\n    if (dispatch) {\n      tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate)\n    }\n    return true\n  }\n\n  if (dispatch) {\n    tr.setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return commands.insertContentAt({ from: 0, to: doc.content.size }, content, {\n    parseOptions,\n    errorOnInvalidContent: options.errorOnInvalidContent ?? editor.options.enableContentCheck,\n  })\n}\n","import { Mark, MarkType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { getMarkType } from './getMarkType.js'\n\nexport function getMarkAttributes(\n  state: EditorState,\n  typeOrName: string | MarkType,\n): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  const marks: Mark[] = []\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks)\n    }\n\n    marks.push(...state.selection.$head.marks())\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks)\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (!mark) {\n    return {}\n  }\n\n  return { ...mark.attrs }\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { Transaction } from '@tiptap/pm/state'\nimport { Transform } from '@tiptap/pm/transform'\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n * @param oldDoc The Prosemirror node to start from\n * @param transactions The transactions to combine\n * @returns A new `Transform` with all steps of the passed transactions\n */\nexport function combineTransactionSteps(\n  oldDoc: ProseMirrorNode,\n  transactions: Transaction[],\n): Transform {\n  const transform = new Transform(oldDoc)\n\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step)\n    })\n  })\n\n  return transform\n}\n","import { ContentMatch, NodeType } from '@tiptap/pm/model'\n\n/**\n * Gets the default block type at a given match\n * @param match The content match to get the default block type from\n * @returns The default block type or null\n */\nexport function defaultBlockAt(match: ContentMatch): NodeType | null {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n\n  return null\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { NodeWithPos, Predicate } from '../types.js'\n\n/**\n * Find children inside a Prosemirror node that match a predicate.\n * @param node The Prosemirror node to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nexport function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { NodeWithPos, Predicate, Range } from '../types.js'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n * @param node The Prosemirror node to search in\n * @param range The range to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nexport function findChildrenInRange(\n  node: ProseMirrorNode,\n  range: Range,\n  predicate: Predicate,\n): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode, ResolvedPos } from '@tiptap/pm/model'\n\nimport { Predicate } from '../types.js'\n\n/**\n * Finds the closest parent node to a resolved position that matches a predicate.\n * @param $pos The resolved position to search from\n * @param predicate The predicate to match\n * @returns The closest parent node to the resolved position that matches the predicate\n * @example ```js\n * findParentNodeClosestToPos($from, node => node.type.name === 'paragraph')\n * ```\n */\nexport function findParentNodeClosestToPos(\n  $pos: ResolvedPos,\n  predicate: Predicate,\n):\n  | {\n      pos: number\n      start: number\n      depth: number\n      node: ProseMirrorNode\n    }\n  | undefined {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n","import { Selection } from '@tiptap/pm/state'\n\nimport { Predicate } from '../types.js'\nimport { findParentNodeClosestToPos } from './findParentNodeClosestToPos.js'\n\n/**\n * Finds the closest parent node to the current selection that matches a predicate.\n * @param predicate The predicate to match\n * @returns A command that finds the closest parent node to the current selection that matches the predicate\n * @example ```js\n * findParentNode(node => node.type.name === 'paragraph')\n * ```\n */\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n","import { Schema } from '@tiptap/pm/model'\n\nimport { Editor } from '../Editor.js'\nimport { ExtensionManager } from '../ExtensionManager.js'\nimport { Extensions } from '../types.js'\nimport { getSchemaByResolvedExtensions } from './getSchemaByResolvedExtensions.js'\n\nexport function getSchema(extensions: Extensions, editor?: Editor): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions, editor)\n}\n","import { Node } from '@tiptap/pm/model'\n\nimport { Extensions, JSONContent } from '../types.js'\nimport { getHTMLFromFragment } from './getHTMLFromFragment.js'\nimport { getSchema } from './getSchema.js'\n\n/**\n * Generate HTML from a JSONContent\n * @param doc The JSONContent to generate HTML from\n * @param extensions The extensions to use for the schema\n * @returns The generated HTML\n */\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode.content, schema)\n}\n","import { DOMParser } from '@tiptap/pm/model'\n\nimport { Extensions } from '../types.js'\nimport { elementFromString } from '../utilities/elementFromString.js'\nimport { getSchema } from './getSchema.js'\n\n/**\n * Generate JSONContent from HTML\n * @param html The HTML to generate JSONContent from\n * @param extensions The extensions to use for the schema\n * @returns The generated JSONContent\n */\nexport function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema).parse(dom).toJSON()\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { TextSerializer } from '../types.js'\nimport { getTextBetween } from './getTextBetween.js'\n\n/**\n * Gets the text of a Prosemirror node\n * @param node The Prosemirror node\n * @param options Options for the text serializer & block separator\n * @returns The text of the node\n * @example ```js\n * const text = getText(node, { blockSeparator: '\\n' })\n * ```\n */\nexport function getText(\n  node: ProseMirrorNode,\n  options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  },\n) {\n  const range = {\n    from: 0,\n    to: node.content.size,\n  }\n\n  return getTextBetween(node, range, options)\n}\n","import { Node } from '@tiptap/pm/model'\n\nimport { Extensions, JSONContent, TextSerializer } from '../types.js'\nimport { getSchema } from './getSchema.js'\nimport { getText } from './getText.js'\nimport { getTextSerializersFromSchema } from './getTextSerializersFromSchema.js'\n\n/**\n * Generate raw text from a JSONContent\n * @param doc The JSONContent to generate text from\n * @param extensions The extensions to use for the schema\n * @param options Options for the text generation f.e. blockSeparator or textSerializers\n * @returns The generated text\n */\nexport function generateText(\n  doc: JSONContent,\n  extensions: Extensions,\n  options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  },\n): string {\n  const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {}\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...getTextSerializersFromSchema(schema),\n      ...textSerializers,\n    },\n  })\n}\n","import { Node, NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { getNodeType } from './getNodeType.js'\n\nexport function getNodeAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType,\n): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  const nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node)\n  })\n\n  const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name)\n\n  if (!node) {\n    return {}\n  }\n\n  return { ...node.attrs }\n}\n","import { MarkType, NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { getMarkAttributes } from './getMarkAttributes.js'\nimport { getNodeAttributes } from './getNodeAttributes.js'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName.js'\n\n/**\n * Get node or mark attributes by type or name on the current editor state\n * @param state The current editor state\n * @param typeOrName The node or mark type or name\n * @returns The attributes of the node or mark or an empty object\n */\nexport function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string' ? typeOrName : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n","/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nexport function removeDuplicates<T>(array: T[], by = JSON.stringify): T[] {\n  const seen: Record<any, any> = {}\n\n  return array.filter(item => {\n    const key = by(item)\n\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true)\n  })\n}\n","import { Step, Transform } from '@tiptap/pm/transform'\n\nimport { Range } from '../types.js'\nimport { removeDuplicates } from '../utilities/removeDuplicates.js'\n\nexport type ChangedRange = {\n  oldRange: Range,\n  newRange: Range,\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes: ChangedRange[]): ChangedRange[] {\n  const uniqueChanges = removeDuplicates(changes)\n\n  return uniqueChanges.length === 1\n    ? uniqueChanges\n    : uniqueChanges.filter((change, index) => {\n      const rest = uniqueChanges.filter((_, i) => i !== index)\n\n      return !rest.some(otherChange => {\n        return change.oldRange.from >= otherChange.oldRange.from\n          && change.oldRange.to <= otherChange.oldRange.to\n          && change.newRange.from >= otherChange.newRange.from\n          && change.newRange.to <= otherChange.newRange.to\n      })\n    })\n}\n\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nexport function getChangedRanges(transform: Transform): ChangedRange[] {\n  const { mapping, steps } = transform\n  const changes: ChangedRange[] = []\n\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges: Range[] = []\n\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const { from, to } = steps[index] as Step & {\n        from?: number,\n        to?: number,\n      }\n\n      if (from === undefined || to === undefined) {\n        return\n      }\n\n      ranges.push({ from, to })\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({ from, to })\n      })\n    }\n\n    ranges.forEach(({ from, to }) => {\n      const newStart = mapping.slice(index).map(from, -1)\n      const newEnd = mapping.slice(index).map(to)\n      const oldStart = mapping.invert().map(newStart, -1)\n      const oldEnd = mapping.invert().map(newEnd)\n\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd,\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd,\n        },\n      })\n    })\n  })\n\n  return simplifyChangedRanges(changes)\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { JSONContent } from '../types.js'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number\n  to: number\n}\n\nexport function getDebugJSON(node: ProseMirrorNode, startOffset = 0): DebugJSONContent {\n  const isTopNode = node.type === node.type.schema.topNodeType\n  const increment = isTopNode ? 0 : 1\n  const from = startOffset\n  const to = from + node.nodeSize\n  const marks = node.marks.map(mark => {\n    const output: { type: string; attrs?: Record<string, any> } = {\n      type: mark.type.name,\n    }\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs }\n    }\n\n    return output\n  })\n  const attrs = { ...node.attrs }\n  const output: DebugJSONContent = {\n    type: node.type.name,\n    from,\n    to,\n  }\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs\n  }\n\n  if (marks.length) {\n    output.marks = marks\n  }\n\n  if (node.content.childCount) {\n    output.content = []\n\n    node.forEach((child, offset) => {\n      output.content?.push(getDebugJSON(child, startOffset + offset + increment))\n    })\n  }\n\n  if (node.text) {\n    output.text = node.text\n  }\n\n  return output\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { MarkRange } from '../types.js'\nimport { getMarkRange } from './getMarkRange.js'\n\nexport function getMarksBetween(from: number, to: number, doc: ProseMirrorNode): MarkRange[] {\n  const marks: MarkRange[] = []\n\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc\n      .resolve(from)\n      .marks()\n      .forEach(mark => {\n        const $pos = doc.resolve(from)\n        const range = getMarkRange($pos, mark.type)\n\n        if (!range) {\n          return\n        }\n\n        marks.push({\n          mark,\n          ...range,\n        })\n      })\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      if (!node || node?.nodeSize === undefined) {\n        return\n      }\n\n      marks.push(\n        ...node.marks.map(mark => ({\n          from: pos,\n          to: pos + node.nodeSize,\n          mark,\n        })),\n      )\n    })\n  }\n\n  return marks\n}\n","import { Node, NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\n/**\n * Finds the first node of a given type or name in the current selection.\n * @param state The editor state.\n * @param typeOrName The node type or name.\n * @param pos The position to start searching from.\n * @param maxDepth The maximum depth to search.\n * @returns The node and the depth as an array.\n */\nexport const getNodeAtPosition = (state: EditorState, typeOrName: string | NodeType, pos: number, maxDepth = 20) => {\n  const $pos = state.doc.resolve(pos)\n\n  let currentDepth = maxDepth\n  let node: Node | null = null\n\n  while (currentDepth > 0 && node === null) {\n    const currentNode = $pos.node(currentDepth)\n\n    if (currentNode?.type.name === typeOrName) {\n      node = currentNode\n    } else {\n      currentDepth -= 1\n    }\n  }\n\n  return [node, currentDepth] as [Node | null, number]\n}\n","import { ExtensionAttribute } from '../types.js'\n\n/**\n * Return attributes of an extension that should be splitted by keepOnSplit flag\n * @param extensionAttributes Array of extension attributes\n * @param typeName The type of the extension\n * @param attributes The attributes of the extension\n * @returns The splitted attributes\n */\nexport function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n","import { MarkType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { MarkRange } from '../types.js'\nimport { objectIncludes } from '../utilities/objectIncludes.js'\nimport { getMarkType } from './getMarkType.js'\n\nexport function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { empty, ranges } = state.selection\n  const type = typeOrName ? getMarkType(typeOrName, state.schema) : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }))\n  }\n\n  let selectionRange = 0\n  const markRanges: MarkRange[] = []\n\n  ranges.forEach(({ $from, $to }) => {\n    const from = $from.pos\n    const to = $to.pos\n\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return\n      }\n\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges.push(\n        ...node.marks.map(mark => ({\n          mark,\n          from: relativeFrom,\n          to: relativeTo,\n        })),\n      )\n    })\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange\n\n  return range >= selectionRange\n}\n","import { EditorState } from '@tiptap/pm/state'\n\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName.js'\nimport { isMarkActive } from './isMarkActive.js'\nimport { isNodeActive } from './isNodeActive.js'\n\nexport function isActive(\n  state: EditorState,\n  name: string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n","import { EditorState } from '@tiptap/pm/state'\n\nimport { findParentNode } from './findParentNode.js'\n\nexport const isAtEndOfNode = (state: EditorState, nodeType?: string) => {\n  const { $from, $to, $anchor } = state.selection\n\n  if (nodeType) {\n    const parentNode = findParentNode(node => node.type.name === nodeType)(state.selection)\n\n    if (!parentNode) {\n      return false\n    }\n\n    const $parentPos = state.doc.resolve(parentNode.pos + 1)\n\n    if ($anchor.pos + 1 === $parentPos.end()) {\n      return true\n    }\n\n    return false\n  }\n\n  if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n    return false\n  }\n\n  return true\n}\n","import { EditorState } from '@tiptap/pm/state'\n\nexport const isAtStartOfNode = (state: EditorState) => {\n  const { $from, $to } = state.selection\n\n  if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n    return false\n  }\n\n  return true\n}\n","import { getExtensionField } from '../helpers/getExtensionField.js'\nimport { NodeConfig } from '../index.js'\nimport { Extensions } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\nimport { splitExtensions } from './splitExtensions.js'\n\nexport function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\n/**\n * Returns true if the given prosemirror node is empty.\n */\nexport function isNodeEmpty(\n  node: ProseMirrorNode,\n  {\n    checkChildren = true,\n    ignoreWhitespace = false,\n  }: {\n    /**\n     * When true (default), it will also check if all children are empty.\n     */\n    checkChildren?: boolean;\n    /**\n     * When true, it will ignore whitespace when checking for emptiness.\n     */\n    ignoreWhitespace?: boolean;\n  } = {},\n): boolean {\n  if (ignoreWhitespace) {\n    if (node.type.name === 'hardBreak') {\n      // Hard breaks are considered empty\n      return true\n    }\n    if (node.isText) {\n      return /^\\s*$/m.test(node.text ?? '')\n    }\n  }\n\n  if (node.isText) {\n    return !node.text\n  }\n\n  if (node.isAtom || node.isLeaf) {\n    return false\n  }\n\n  if (node.content.childCount === 0) {\n    return true\n  }\n\n  if (checkChildren) {\n    let isContentEmpty = true\n\n    node.content.forEach(childNode => {\n      if (isContentEmpty === false) {\n        // Exit early for perf\n        return\n      }\n\n      if (!isNodeEmpty(childNode, { ignoreWhitespace, checkChildren })) {\n        isContentEmpty = false\n      }\n    })\n\n    return isContentEmpty\n  }\n\n  return false\n}\n","import { NodeSelection } from '@tiptap/pm/state'\n\nexport function isNodeSelection(value: unknown): value is NodeSelection {\n  return value instanceof NodeSelection\n}\n","import { EditorView } from '@tiptap/pm/view'\n\nimport { minMax } from '../utilities/minMax.js'\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n","import type { Schema } from '@tiptap/pm/model'\n\nimport type { JSONContent } from '../types.js'\n\ntype RewriteUnknownContentOptions = {\n  /**\n   * If true, unknown nodes will be treated as paragraphs\n   * @default true\n   */\n  fallbackToParagraph?: boolean;\n};\n\ntype RewrittenContent = {\n  /**\n   * The original JSON content that was rewritten\n   */\n  original: JSONContent;\n  /**\n   * The name of the node or mark that was unsupported\n   */\n  unsupported: string;\n}[];\n\n/**\n * The actual implementation of the rewriteUnknownContent function\n */\nfunction rewriteUnknownContentInner({\n  json,\n  validMarks,\n  validNodes,\n  options,\n  rewrittenContent = [],\n}: {\n  json: JSONContent;\n  validMarks: Set<string>;\n  validNodes: Set<string>;\n  options?: RewriteUnknownContentOptions;\n  rewrittenContent?: RewrittenContent;\n}): {\n  /**\n   * The cleaned JSON content\n   */\n  json: JSONContent | null;\n  /**\n   * The array of nodes and marks that were rewritten\n   */\n  rewrittenContent: RewrittenContent;\n} {\n  if (json.marks && Array.isArray(json.marks)) {\n    json.marks = json.marks.filter(mark => {\n      const name = typeof mark === 'string' ? mark : mark.type\n\n      if (validMarks.has(name)) {\n        return true\n      }\n\n      rewrittenContent.push({\n        original: JSON.parse(JSON.stringify(mark)),\n        unsupported: name,\n      })\n      // Just ignore any unknown marks\n      return false\n    })\n  }\n\n  if (json.content && Array.isArray(json.content)) {\n    json.content = json.content\n      .map(\n        value => rewriteUnknownContentInner({\n          json: value,\n          validMarks,\n          validNodes,\n          options,\n          rewrittenContent,\n        }).json,\n      )\n      .filter(a => a !== null && a !== undefined)\n  }\n\n  if (json.type && !validNodes.has(json.type)) {\n    rewrittenContent.push({\n      original: JSON.parse(JSON.stringify(json)),\n      unsupported: json.type,\n    })\n\n    if (json.content && Array.isArray(json.content) && (options?.fallbackToParagraph !== false)) {\n      // Just treat it like a paragraph and hope for the best\n      json.type = 'paragraph'\n\n      return {\n        json,\n        rewrittenContent,\n      }\n    }\n\n    // or just omit it entirely\n    return {\n      json: null,\n      rewrittenContent,\n    }\n  }\n\n  return { json, rewrittenContent }\n}\n\n/**\n * Rewrite unknown nodes and marks within JSON content\n * Allowing for user within the editor\n */\nexport function rewriteUnknownContent(\n  /**\n   * The JSON content to clean of unknown nodes and marks\n   */\n  json: JSONContent,\n  /**\n   * The schema to use for validation\n   */\n  schema: Schema,\n  /**\n   * Options for the cleaning process\n   */\n  options?: RewriteUnknownContentOptions,\n): {\n  /**\n   * The cleaned JSON content\n   */\n  json: JSONContent | null;\n  /**\n   * The array of nodes and marks that were rewritten\n   */\n  rewrittenContent: {\n    /**\n     * The original JSON content that was rewritten\n     */\n    original: JSONContent;\n    /**\n     * The name of the node or mark that was unsupported\n     */\n    unsupported: string;\n  }[];\n} {\n  return rewriteUnknownContentInner({\n    json,\n    validNodes: new Set(Object.keys(schema.nodes)),\n    validMarks: new Set(Object.keys(schema.marks)),\n    options,\n  })\n}\n","import { MarkType, ResolvedPos } from '@tiptap/pm/model'\nimport { EditorState, Transaction } from '@tiptap/pm/state'\n\nimport { getMarkAttributes } from '../helpers/getMarkAttributes.js'\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { isTextSelection } from '../helpers/index.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       * @param typeOrName The mark type or name.\n       * @example editor.commands.setMark('bold', { level: 1 })\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nfunction canSetMark(state: EditorState, tr: Transaction, newMarkType: MarkType) {\n  const { selection } = tr\n  let cursor: ResolvedPos | null = null\n\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor\n  }\n\n  if (cursor) {\n    const currentMarks = state.storedMarks ?? cursor.marks()\n\n    // There can be no current marks that exclude the new mark\n    return (\n      !!newMarkType.isInSet(currentMarks)\n      || !currentMarks.some(mark => mark.type.excludes(newMarkType))\n    )\n  }\n\n  const { ranges } = selection\n\n  return ranges.some(({ $from, $to }) => {\n    let someNodeSupportsMark = $from.depth === 0\n      ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType)\n      : false\n\n    state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false\n      }\n\n      if (node.isInline) {\n        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType)\n        const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks)\n          || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType))\n\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType\n      }\n      return !someNodeSupportsMark\n    })\n\n    return someNodeSupportsMark\n  })\n}\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(\n        type.create({\n          ...oldAttributes,\n          ...attributes,\n        }),\n      )\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(\n                  trimmedFrom,\n                  trimmedTo,\n                  type.create({\n                    ...mark.attrs,\n                    ...attributes,\n                  }),\n                )\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return canSetMark(state, tr, type)\n}\n","import type { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       * @param key The key of the metadata property.\n       * @param value The value to store.\n       * @example editor.commands.setMeta('foo', 'bar')\n       */\n      setMeta: (key: string | Plugin | PluginKey, value: any) => ReturnType,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n","import { setBlockType } from '@tiptap/pm/commands'\nimport { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       * @param typeOrName The type or name of the node\n       * @param attributes The attributes of the node\n       * @example editor.commands.setNode('paragraph')\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  let attributesToCopy: Record<string, any> | undefined\n\n  if (state.selection.$anchor.sameParent(state.selection.$head)) {\n    // only copy attributes if the selection is pointing to a node of the same type\n    attributesToCopy = state.selection.$anchor.parent.attrs\n  }\n\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.')\n\n    return false\n  }\n\n  return (\n    chain()\n    // try to convert node to default node if needed\n      .command(({ commands }) => {\n        const canSetBlock = setBlockType(type, { ...attributesToCopy, ...attributes })(state)\n\n        if (canSetBlock) {\n          return true\n        }\n\n        return commands.clearNodes()\n      })\n      .command(({ state: updatedState }) => {\n        return setBlockType(type, { ...attributesToCopy, ...attributes })(updatedState, dispatch)\n      })\n      .run()\n  )\n}\n","import { NodeSelection } from '@tiptap/pm/state'\n\nimport { RawCommands } from '../types.js'\nimport { minMax } from '../utilities/minMax.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       * @param position - Position of the node.\n       * @example editor.commands.setNodeSelection(10)\n       */\n      setNodeSelection: (position: number) => ReturnType\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const from = minMax(position, 0, doc.content.size)\n    const selection = NodeSelection.create(doc, from)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { TextSelection } from '@tiptap/pm/state'\n\nimport { Range, RawCommands } from '../types.js'\nimport { minMax } from '../utilities/minMax.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       * @param position The position of the selection.\n       * @example editor.commands.setTextSelection(10)\n       */\n      setTextSelection: (position: number | Range) => ReturnType\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number' ? { from: position, to: position } : position\n    const minPos = TextSelection.atStart(doc).from\n    const maxPos = TextSelection.atEnd(doc).to\n    const resolvedFrom = minMax(from, minPos, maxPos)\n    const resolvedEnd = minMax(to, minPos, maxPos)\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { sinkListItem as originalSinkListItem } from '@tiptap/pm/schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       * @param typeOrName The type or name of the node.\n       * @example editor.commands.sinkListItem('listItem')\n       */\n      sinkListItem: (typeOrName: string | NodeType) => ReturnType\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n","import { EditorState, NodeSelection, TextSelection } from '@tiptap/pm/state'\nimport { canSplit } from '@tiptap/pm/transform'\n\nimport { defaultBlockAt } from '../helpers/defaultBlockAt.js'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes.js'\nimport { RawCommands } from '../types.js'\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       * @param options.keepMarks Keep marks from the previous node.\n       * @example editor.commands.splitBlock()\n       * @example editor.commands.splitBlock({ keepMarks: true })\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => ReturnType\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr, state, dispatch, editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  const atEnd = $to.parentOffset === $to.parent.content.size\n\n  const deflt = $from.depth === 0\n    ? undefined\n    : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n  let types = atEnd && deflt\n    ? [\n      {\n        type: deflt,\n        attrs: newAttributes,\n      },\n    ]\n    : undefined\n\n  let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n  if (\n    !types\n      && !can\n      && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n  ) {\n    can = true\n    types = deflt\n      ? [\n        {\n          type: deflt,\n          attrs: newAttributes,\n        },\n      ]\n      : undefined\n  }\n\n  if (dispatch) {\n    if (can) {\n      if (selection instanceof TextSelection) {\n        tr.deleteSelection()\n      }\n\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return can\n}\n","import {\n  Fragment, Node as ProseMirrorNode, NodeType, Slice,\n} from '@tiptap/pm/model'\nimport { TextSelection } from '@tiptap/pm/state'\nimport { canSplit } from '@tiptap/pm/transform'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       * @param typeOrName The type or name of the node.\n       * @param overrideAttrs The attributes to ensure on the new node.\n       * @example editor.commands.splitListItem('listItem')\n       */\n      splitListItem: (typeOrName: string | NodeType, overrideAttrs?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = (typeOrName, overrideAttrs = {}) => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n    const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n        || $from.node(-3).type !== type\n        || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      // eslint-disable-next-line\n        const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // eslint-disable-next-line\n        const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = {\n        ...getSplittedAttributes(\n          extensionAttributes,\n          $from.node().type.name,\n          $from.node().attrs,\n        ),\n        ...overrideAttrs,\n      }\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      const start = $from.before($from.depth - (depthBefore - 1))\n\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n\n      let sel = -1\n\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1\n        }\n      })\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)))\n      }\n\n      tr.scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null\n\n  const newTypeAttributes = {\n    ...getSplittedAttributes(\n      extensionAttributes,\n      grandParent.type.name,\n      grandParent.attrs,\n    ),\n    ...overrideAttrs,\n  }\n  const newNextTypeAttributes = {\n    ...getSplittedAttributes(\n      extensionAttributes,\n      $from.node().type.name,\n      $from.node().attrs,\n    ),\n    ...overrideAttrs,\n  }\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [\n      { type, attrs: newTypeAttributes },\n      { type: nextType, attrs: newNextTypeAttributes },\n    ]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    const { selection, storedMarks } = state\n    const { splittableMarks } = editor.extensionManager\n    const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n    tr.split($from.pos, 2, types).scrollIntoView()\n\n    if (!marks || !dispatch) {\n      return true\n    }\n\n    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n    tr.ensureMarks(filteredMarks)\n  }\n\n  return true\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { Transaction } from '@tiptap/pm/state'\nimport { canJoin } from '@tiptap/pm/transform'\n\nimport { findParentNode } from '../helpers/findParentNode.js'\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isList } from '../helpers/isList.js'\nimport { RawCommands } from '../types.js'\n\nconst joinListBackwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth)\n\n  if (before === undefined) {\n    return true\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before)\n  const canJoinBackwards = list.node.type === nodeBefore?.type && canJoin(tr.doc, list.pos)\n\n  if (!canJoinBackwards) {\n    return true\n  }\n\n  tr.join(list.pos)\n\n  return true\n}\n\nconst joinListForwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth)\n\n  if (after === undefined) {\n    return true\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after)\n  const canJoinForwards = list.node.type === nodeAfter?.type && canJoin(tr.doc, after)\n\n  if (!canJoinForwards) {\n    return true\n  }\n\n  tr.join(after)\n\n  return true\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       * @param listTypeOrName The type or name of the list.\n       * @param itemTypeOrName The type or name of the list item.\n       * @param keepMarks Keep marks when toggling.\n       * @param attributes Attributes for the new list.\n       * @example editor.commands.toggleList('bulletList', 'listItem')\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType, keepMarks?: boolean, attributes?: Record<string, any>) => ReturnType;\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions, splittableMarks } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection, storedMarks } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n        && listType.validContent(parentList.node.content)\n        && dispatch\n    ) {\n      return chain()\n        .command(() => {\n          tr.setNodeMarkup(parentList.pos, listType)\n\n          return true\n        })\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run()\n    }\n  }\n  if (!keepMarks || !marks || !dispatch) {\n\n    return chain()\n      // try to convert node to default node if needed\n      .command(() => {\n        const canWrapInList = can().wrapInList(listType, attributes)\n\n        if (canWrapInList) {\n          return true\n        }\n\n        return commands.clearNodes()\n      })\n      .wrapInList(listType, attributes)\n      .command(() => joinListBackwards(tr, listType))\n      .command(() => joinListForwards(tr, listType))\n      .run()\n  }\n\n  return (\n    chain()\n    // try to convert node to default node if needed\n      .command(() => {\n        const canWrapInList = can().wrapInList(listType, attributes)\n\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n        tr.ensureMarks(filteredMarks)\n\n        if (canWrapInList) {\n          return true\n        }\n\n        return commands.clearNodes()\n      })\n      .wrapInList(listType, attributes)\n      .command(() => joinListBackwards(tr, listType))\n      .command(() => joinListForwards(tr, listType))\n      .run()\n  )\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { isMarkActive } from '../helpers/isMarkActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       * @param typeOrName The mark type or name.\n       * @param attributes The attributes of the mark.\n       * @param options.extendEmptyMarkRange Removes the mark even across the current selection. Defaults to `false`.\n       * @example editor.commands.toggleMark('bold')\n       */\n      toggleMark: (\n        /**\n         * The mark type or name.\n         */\n        typeOrName: string | MarkType,\n\n        /**\n         * The attributes of the mark.\n         */\n        attributes?: Record<string, any>,\n\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n  const { extendEmptyMarkRange = false } = options\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type, { extendEmptyMarkRange })\n  }\n\n  return commands.setMark(type, attributes)\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isNodeActive } from '../helpers/isNodeActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       * @param typeOrName The type or name of the node.\n       * @param toggleTypeOrName The type or name of the node to toggle.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.toggleNode('heading', 'paragraph')\n       */\n      toggleNode: (\n        typeOrName: string | NodeType,\n        toggleTypeOrName: string | NodeType,\n        attributes?: Record<string, any>,\n      ) => ReturnType\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  let attributesToCopy: Record<string, any> | undefined\n\n  if (state.selection.$anchor.sameParent(state.selection.$head)) {\n    // only copy attributes if the selection is pointing to a node of the same type\n    attributesToCopy = state.selection.$anchor.parent.attrs\n  }\n\n  if (isActive) {\n    return commands.setNode(toggleType, attributesToCopy)\n  }\n\n  // If the node is not active, we want to set the new node type with the given attributes\n  // Copying over the attributes from the current node if the selection is pointing to a node of the same type\n  return commands.setNode(type, { ...attributesToCopy, ...attributes })\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isNodeActive } from '../helpers/isNodeActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.toggleWrap('blockquote')\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.lift(type)\n  }\n\n  return commands.wrapIn(type, attributes)\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       * @example editor.commands.undoInputRule()\n       */\n      undoInputRule: () => ReturnType,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  const plugins = state.plugins\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i]\n    let undoable\n\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr\n        const toUndo = undoable.transform\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks()\n\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       * @example editor.commands.unsetAllMarks()\n       */\n      unsetAllMarks: () => ReturnType,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos)\n    })\n  }\n\n  return true\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarkRange } from '../helpers/getMarkRange.js'\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       * @param typeOrName The mark type or name.\n       * @param options.extendEmptyMarkRange Removes the mark even across the current selection. Defaults to `false`.\n       * @example editor.commands.unsetMark('bold')\n       */\n      unsetMark: (\n        /**\n         * The mark type or name.\n         */\n        typeOrName: string | MarkType,\n\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n  const { extendEmptyMarkRange = false } = options\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  if (empty && extendEmptyMarkRange) {\n    let { from, to } = selection\n    const attrs = $from.marks().find(mark => mark.type === type)?.attrs\n    const range = getMarkRange($from, type, attrs)\n\n    if (range) {\n      from = range.from\n      to = range.to\n    }\n\n    tr.removeMark(from, to, type)\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type)\n    })\n  }\n\n  tr.removeStoredMark(type)\n\n  return true\n}\n","import {\n  Mark, MarkType, Node, NodeType,\n} from '@tiptap/pm/model'\nimport { SelectionRange } from '@tiptap/pm/state'\n\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       * @param typeOrName The type or name of the node or mark.\n       * @param attributes The attributes of the node or mark.\n       * @example editor.commands.updateAttributes('mention', { userId: \"2\" })\n       */\n      updateAttributes: (\n        /**\n         * The type or name of the node or mark.\n         */\n        typeOrName: string | NodeType | MarkType,\n\n        /**\n         * The attributes of the node or mark.\n         */\n        attributes: Record<string, any>,\n      ) => ReturnType\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string' ? typeOrName : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach((range: SelectionRange) => {\n\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      let lastPos: number | undefined\n      let lastNode: Node | undefined\n      let trimmedFrom: number\n      let trimmedTo: number\n\n      if (tr.selection.empty) {\n        state.doc.nodesBetween(from, to, (node: Node, pos: number) => {\n\n          if (nodeType && nodeType === node.type) {\n            trimmedFrom = Math.max(pos, from)\n            trimmedTo = Math.min(pos + node.nodeSize, to)\n            lastPos = pos\n            lastNode = node\n          }\n        })\n      } else {\n        state.doc.nodesBetween(from, to, (node: Node, pos: number) => {\n\n          if (pos < from && nodeType && nodeType === node.type) {\n            trimmedFrom = Math.max(pos, from)\n            trimmedTo = Math.min(pos + node.nodeSize, to)\n            lastPos = pos\n            lastNode = node\n          }\n\n          if (pos >= from && pos <= to) {\n\n            if (nodeType && nodeType === node.type) {\n              tr.setNodeMarkup(pos, undefined, {\n                ...node.attrs,\n                ...attributes,\n              })\n            }\n\n            if (markType && node.marks.length) {\n              node.marks.forEach((mark: Mark) => {\n\n                if (markType === mark.type) {\n                  const trimmedFrom2 = Math.max(pos, from)\n                  const trimmedTo2 = Math.min(pos + node.nodeSize, to)\n\n                  tr.addMark(\n                    trimmedFrom2,\n                    trimmedTo2,\n                    markType.create({\n                      ...mark.attrs,\n                      ...attributes,\n                    }),\n                  )\n                }\n              })\n            }\n          }\n        })\n      }\n\n      if (lastNode) {\n\n        if (lastPos !== undefined) {\n          tr.setNodeMarkup(lastPos, undefined, {\n            ...lastNode.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && lastNode.marks.length) {\n          lastNode.marks.forEach((mark: Mark) => {\n\n            if (markType === mark.type) {\n              tr.addMark(\n                trimmedFrom,\n                trimmedTo,\n                markType.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }),\n              )\n            }\n          })\n        }\n      }\n    })\n  }\n\n  return true\n}\n","import { wrapIn as originalWrapIn } from '@tiptap/pm/commands'\nimport { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.wrapIn('blockquote')\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { wrapInList as originalWrapInList } from '@tiptap/pm/schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.wrapInList('bulletList')\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n","import * as commands from '../commands/index.js'\nimport { Extension } from '../Extension.js'\n\nexport * from '../commands/index.js'\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...commands,\n    }\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const Drop = Extension.create({\n  name: 'drop',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tiptapDrop'),\n\n        props: {\n          handleDrop: (_, e, slice, moved) => {\n            this.editor.emit('drop', {\n              editor: this.editor,\n              event: e,\n              slice,\n              moved,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const focusEventsPluginKey = new PluginKey('focusEvents')\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: focusEventsPluginKey,\n        props: {\n          handleDOMEvents: {\n            focus: (view, event: Event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event: Event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey, Selection } from '@tiptap/pm/state'\n\nimport { CommandManager } from '../CommandManager.js'\nimport { Extension } from '../Extension.js'\nimport { createChainableState } from '../helpers/createChainableState.js'\nimport { isNodeEmpty } from '../helpers/isNodeEmpty.js'\nimport { isiOS } from '../utilities/isiOS.js'\nimport { isMacOS } from '../utilities/isMacOS.js'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n\n      // maybe convert first text block node to default node\n      () => commands.command(({ tr }) => {\n        const { selection, doc } = tr\n        const { empty, $anchor } = selection\n        const { pos, parent } = $anchor\n        const $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor\n        const parentIsIsolating = $parentPos.parent.type.spec.isolating\n\n        const parentPos = $anchor.pos - $anchor.parentOffset\n\n        const isAtStart = (parentIsIsolating && $parentPos.parent.childCount === 1)\n          ? parentPos === $anchor.pos\n          : Selection.atStart(doc).from === pos\n\n        if (\n          !empty\n          || !parent.type.isTextblock\n          || parent.textContent.length\n          || !isAtStart\n          || (isAtStart && $anchor.parent.type.name === 'paragraph') // prevent clearNodes when no nodes to clear, otherwise history stack is appended\n        ) {\n          return false\n        }\n\n        return commands.clearNodes()\n      }),\n\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.deleteCurrentNode(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    const handleEnter = () => this.editor.commands.first(({ commands }) => [\n      () => commands.newlineInCode(),\n      () => commands.createParagraphNear(),\n      () => commands.liftEmptyBlock(),\n      () => commands.splitBlock(),\n    ])\n\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll(),\n    }\n\n    const pcKeymap = {\n      ...baseKeymap,\n    }\n\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n    }\n\n    if (isiOS() || isMacOS()) {\n      return macKeymap\n    }\n\n    return pcKeymap\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // With this plugin we check if the whole document was selected and deleted.\n      // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n      // to a paragraph if necessary.\n      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n      // with many other commands.\n      new Plugin({\n        key: new PluginKey('clearDocument'),\n        appendTransaction: (transactions, oldState, newState) => {\n          if (transactions.some(tr => tr.getMeta('composition'))) {\n            return\n          }\n\n          const docChanges = transactions.some(transaction => transaction.docChanged)\n            && !oldState.doc.eq(newState.doc)\n\n          const ignoreTr = transactions.some(transaction => transaction.getMeta('preventClearDocument'))\n\n          if (!docChanges || ignoreTr) {\n            return\n          }\n\n          const { empty, from, to } = oldState.selection\n          const allFrom = Selection.atStart(oldState.doc).from\n          const allEnd = Selection.atEnd(oldState.doc).to\n          const allWasSelected = from === allFrom && to === allEnd\n\n          if (empty || !allWasSelected) {\n            return\n          }\n\n          const isEmpty = isNodeEmpty(newState.doc)\n\n          if (!isEmpty) {\n            return\n          }\n\n          const tr = newState.tr\n          const state = createChainableState({\n            state: newState,\n            transaction: tr,\n          })\n          const { commands } = new CommandManager({\n            editor: this.editor,\n            state,\n          })\n\n          commands.clearNodes()\n\n          if (!tr.steps.length) {\n            return\n          }\n\n          return tr\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const Paste = Extension.create({\n  name: 'paste',\n\n  addProseMirrorPlugins() {\n\n    return [\n      new Plugin({\n        key: new PluginKey('tiptapPaste'),\n\n        props: {\n          handlePaste: (_view, e, slice) => {\n            this.editor.emit('paste', {\n              editor: this.editor,\n              event: e,\n              slice,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tabindex'),\n        props: {\n          attributes: (): { [name: string]: string; } => (this.editor.isEditable ? { tabindex: '0' } : {}),\n        },\n      }),\n    ]\n  },\n})\n","import {\n  Fragment, Node, ResolvedPos,\n} from '@tiptap/pm/model'\n\nimport { Editor } from './Editor.js'\nimport { Content, Range } from './types.js'\n\nexport class NodePos {\n  private resolvedPos: ResolvedPos\n\n  private isBlock: boolean\n\n  private editor: Editor\n\n  private get name(): string {\n    return this.node.type.name\n  }\n\n  constructor(pos: ResolvedPos, editor: Editor, isBlock = false, node: Node | null = null) {\n    this.isBlock = isBlock\n    this.resolvedPos = pos\n    this.editor = editor\n    this.currentNode = node\n  }\n\n  private currentNode: Node | null = null\n\n  get node(): Node {\n    return this.currentNode || this.resolvedPos.node()\n  }\n\n  get element(): HTMLElement {\n    return this.editor.view.domAtPos(this.pos).node as HTMLElement\n  }\n\n  public actualDepth: number | null = null\n\n  get depth(): number {\n    return this.actualDepth ?? this.resolvedPos.depth\n  }\n\n  get pos(): number {\n    return this.resolvedPos.pos\n  }\n\n  get content(): Fragment {\n    return this.node.content\n  }\n\n  set content(content: Content) {\n    let from = this.from\n    let to = this.to\n\n    if (this.isBlock) {\n      if (this.content.size === 0) {\n        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`)\n        return\n      }\n\n      from = this.from + 1\n      to = this.to - 1\n    }\n\n    this.editor.commands.insertContentAt({ from, to }, content)\n  }\n\n  get attributes(): { [key: string]: any } {\n    return this.node.attrs\n  }\n\n  get textContent(): string {\n    return this.node.textContent\n  }\n\n  get size(): number {\n    return this.node.nodeSize\n  }\n\n  get from(): number {\n    if (this.isBlock) {\n      return this.pos\n    }\n\n    return this.resolvedPos.start(this.resolvedPos.depth)\n  }\n\n  get range(): Range {\n    return {\n      from: this.from,\n      to: this.to,\n    }\n  }\n\n  get to(): number {\n    if (this.isBlock) {\n      return this.pos + this.size\n    }\n\n    return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1)\n  }\n\n  get parent(): NodePos | null {\n    if (this.depth === 0) {\n      return null\n    }\n\n    const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1)\n    const $pos = this.resolvedPos.doc.resolve(parentPos)\n\n    return new NodePos($pos, this.editor)\n  }\n\n  get before(): NodePos | null {\n    let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2))\n\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.from - 3)\n    }\n\n    return new NodePos($pos, this.editor)\n  }\n\n  get after(): NodePos | null {\n    let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1))\n\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.to + 3)\n    }\n\n    return new NodePos($pos, this.editor)\n  }\n\n  get children(): NodePos[] {\n    const children: NodePos[] = []\n\n    this.node.content.forEach((node, offset) => {\n      const isBlock = node.isBlock && !node.isTextblock\n      const isNonTextAtom = node.isAtom && !node.isText\n\n      const targetPos = this.pos + offset + (isNonTextAtom ? 0 : 1)\n      const $pos = this.resolvedPos.doc.resolve(targetPos)\n\n      if (!isBlock && $pos.depth <= this.depth) {\n        return\n      }\n\n      const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null)\n\n      if (isBlock) {\n        childNodePos.actualDepth = this.depth + 1\n      }\n\n      children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null))\n    })\n\n    return children\n  }\n\n  get firstChild(): NodePos | null {\n    return this.children[0] || null\n  }\n\n  get lastChild(): NodePos | null {\n    const children = this.children\n\n    return children[children.length - 1] || null\n  }\n\n  closest(selector: string, attributes: { [key: string]: any } = {}): NodePos | null {\n    let node: NodePos | null = null\n    let currentNode = this.parent\n\n    while (currentNode && !node) {\n      if (currentNode.node.type.name === selector) {\n        if (Object.keys(attributes).length > 0) {\n          const nodeAttributes = currentNode.node.attrs\n          const attrKeys = Object.keys(attributes)\n\n          for (let index = 0; index < attrKeys.length; index += 1) {\n            const key = attrKeys[index]\n\n            if (nodeAttributes[key] !== attributes[key]) {\n              break\n            }\n          }\n        } else {\n          node = currentNode\n        }\n      }\n\n      currentNode = currentNode.parent\n    }\n\n    return node\n  }\n\n  querySelector(selector: string, attributes: { [key: string]: any } = {}): NodePos | null {\n    return this.querySelectorAll(selector, attributes, true)[0] || null\n  }\n\n  querySelectorAll(selector: string, attributes: { [key: string]: any } = {}, firstItemOnly = false): NodePos[] {\n    let nodes: NodePos[] = []\n\n    if (!this.children || this.children.length === 0) {\n      return nodes\n    }\n    const attrKeys = Object.keys(attributes)\n\n    /**\n     * Finds all children recursively that match the selector and attributes\n     * If firstItemOnly is true, it will return the first item found\n     */\n    this.children.forEach(childPos => {\n      // If we already found a node and we only want the first item, we dont need to keep going\n      if (firstItemOnly && nodes.length > 0) {\n        return\n      }\n\n      if (childPos.node.type.name === selector) {\n        const doesAllAttributesMatch = attrKeys.every(key => attributes[key] === childPos.node.attrs[key])\n\n        if (doesAllAttributesMatch) {\n          nodes.push(childPos)\n        }\n      }\n\n      // If we already found a node and we only want the first item, we can stop here and skip the recursion\n      if (firstItemOnly && nodes.length > 0) {\n        return\n      }\n\n      nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly))\n    })\n\n    return nodes\n  }\n\n  setAttribute(attributes: { [key: string]: any }) {\n    const { tr } = this.editor.state\n\n    tr.setNodeMarkup(this.from, undefined, {\n      ...this.node.attrs,\n      ...attributes,\n    })\n\n    this.editor.view.dispatch(tr)\n  }\n}\n","export const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 0 !important;\n  height: 0 !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n","export function createStyleTag(style: string, nonce?: string, suffix?: string): HTMLStyleElement {\n  const tiptapStyleTag = (<HTMLStyleElement>document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ''}]`))\n\n  if (tiptapStyleTag !== null) {\n    return tiptapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce)\n  }\n\n  styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ''}`, '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n","/* eslint-disable @typescript-eslint/no-empty-object-type */\nimport {\n  MarkType,\n  Node as ProseMirrorNode,\n  NodeType,\n  Schema,\n} from '@tiptap/pm/model'\nimport {\n  EditorState, Plugin, PluginKey, Transaction,\n} from '@tiptap/pm/state'\nimport { EditorView } from '@tiptap/pm/view'\n\nimport { CommandManager } from './CommandManager.js'\nimport { EventEmitter } from './EventEmitter.js'\nimport { ExtensionManager } from './ExtensionManager.js'\nimport {\n  ClipboardTextSerializer, Commands, Drop, Editable, FocusEvents, Keymap, Paste,\n  Tabindex,\n} from './extensions/index.js'\nimport { createDocument } from './helpers/createDocument.js'\nimport { getAttributes } from './helpers/getAttributes.js'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment.js'\nimport { getText } from './helpers/getText.js'\nimport { getTextSerializersFromSchema } from './helpers/getTextSerializersFromSchema.js'\nimport { isActive } from './helpers/isActive.js'\nimport { isNodeEmpty } from './helpers/isNodeEmpty.js'\nimport { resolveFocusPosition } from './helpers/resolveFocusPosition.js'\nimport { NodePos } from './NodePos.js'\nimport { style } from './style.js'\nimport {\n  CanCommands,\n  ChainedCommands,\n  EditorEvents,\n  EditorOptions,\n  JSONContent,\n  SingleCommands,\n  TextSerializer,\n} from './types.js'\nimport { createStyleTag } from './utilities/createStyleTag.js'\nimport { isFunction } from './utilities/isFunction.js'\n\nexport * as extensions from './extensions/index.js'\n\n// @ts-ignore\nexport interface TiptapEditorHTMLElement extends HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter<EditorEvents> {\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  /**\n   * The editor is considered initialized after the `create` event has been emitted.\n   */\n  public isInitialized = false\n\n  public extensionStorage: Record<string, any> = {}\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    injectNonce: undefined,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    coreExtensionOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    enableCoreExtensions: true,\n    enableContentCheck: false,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n    onContentError: ({ error }) => { throw error },\n    onPaste: () => null,\n    onDrop: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.on('contentError', this.options.onContentError)\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n    this.on('drop', ({ event, slice, moved }) => this.options.onDrop(event, slice, moved))\n    this.on('paste', ({ event, slice }) => this.options.onPaste(event, slice))\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n      this.isInitialized = true\n    }, 0)\n  }\n\n  /**\n   * Returns the editor storage.\n   */\n  public get storage(): Record<string, any> {\n    return this.extensionStorage\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.commands\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.chain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.can()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style, this.options.injectNonce)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps)\n    }\n\n    this.view.updateState(this.state)\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean, emitUpdate = true): void {\n    this.setOptions({ editable })\n\n    if (emitUpdate) {\n      this.emit('update', { editor: this, transaction: this.state.tr })\n    }\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable && this.view && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   * @returns The new editor state\n   */\n  public registerPlugin(\n    plugin: Plugin,\n    handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[],\n  ): EditorState {\n    const plugins = isFunction(handlePlugins)\n      ? handlePlugins(plugin, [...this.state.plugins])\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n\n    return state\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKeyToRemove The plugins name\n   * @returns The new editor state or undefined if the editor is destroyed\n   */\n  public unregisterPlugin(nameOrPluginKeyToRemove: string | PluginKey | (string | PluginKey)[]): EditorState | undefined {\n    if (this.isDestroyed) {\n      return undefined\n    }\n\n    const prevPlugins = this.state.plugins\n    let plugins = prevPlugins;\n\n    ([] as (string | PluginKey)[]).concat(nameOrPluginKeyToRemove).forEach(nameOrPluginKey => {\n      // @ts-ignore\n      const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key\n\n      // @ts-ignore\n      plugins = prevPlugins.filter(plugin => !plugin.key.startsWith(name))\n    })\n\n    if (prevPlugins.length === plugins.length) {\n      // No plugin was removed, so we don’t need to update the state\n      return undefined\n    }\n\n    const state = this.state.reconfigure({\n      plugins,\n    })\n\n    this.view.updateState(state)\n\n    return state\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n\n    const coreExtensions = this.options.enableCoreExtensions ? [\n      Editable,\n      ClipboardTextSerializer.configure({\n        blockSeparator: this.options.coreExtensionOptions?.clipboardTextSerializer?.blockSeparator,\n      }),\n      Commands,\n      FocusEvents,\n      Keymap,\n      Tabindex,\n      Drop,\n      Paste,\n    ].filter(ext => {\n      if (typeof this.options.enableCoreExtensions === 'object') {\n        return this.options.enableCoreExtensions[ext.name as keyof typeof this.options.enableCoreExtensions] !== false\n      }\n      return true\n    }) : []\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager({\n      editor: this,\n    })\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    let doc: ProseMirrorNode\n\n    try {\n      doc = createDocument(\n        this.options.content,\n        this.schema,\n        this.options.parseOptions,\n        { errorOnInvalidContent: this.options.enableContentCheck },\n      )\n    } catch (e) {\n      if (!(e instanceof Error) || !['[tiptap error]: Invalid JSON content', '[tiptap error]: Invalid HTML content'].includes(e.message)) {\n        // Not the content error we were expecting\n        throw e\n      }\n      this.emit('contentError', {\n        editor: this,\n        error: e as Error,\n        disableCollaboration: () => {\n          if (this.storage.collaboration) {\n            this.storage.collaboration.isDisabled = true\n          }\n          // To avoid syncing back invalid content, reinitialize the extensions without the collaboration extension\n          this.options.extensions = this.options.extensions.filter(extension => extension.name !== 'collaboration')\n\n          // Restart the initialization process by recreating the extension manager with the new set of extensions\n          this.createExtensionManager()\n        },\n      })\n\n      // Content is invalid, but attempt to create it anyway, stripping out the invalid parts\n      doc = createDocument(\n        this.options.content,\n        this.schema,\n        this.options.parseOptions,\n        { errorOnInvalidContent: false },\n      )\n    }\n    const selection = resolveFocusPosition(doc, this.options.autofocus)\n\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      attributes: {\n        // add `role=\"textbox\"` to the editor element\n        role: 'textbox',\n        ...this.options.editorProps?.attributes,\n      },\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection: selection || undefined,\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n    this.prependClass()\n\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    // @ts-ignore\n    const dom = this.view.dom as TiptapEditorHTMLElement\n\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    if (this.view.isDestroyed) {\n      return\n    }\n\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  /**\n   * Prepend class name to element.\n   */\n  public prependClass(): void {\n    this.view.dom.className = `tiptap ${this.view.dom.className}`\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: () => void) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    // if the editor / the view of the editor was destroyed\n    // the transaction should not be dispatched as there is no view anymore.\n    if (this.view.isDestroyed) {\n      return\n    }\n\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.emit('beforeTransaction', {\n      editor: this,\n      transaction,\n      nextState: state,\n    })\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean\n  public isActive(attributes: {}): boolean\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null\n\n    const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): JSONContent {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc.content, this.schema)\n  }\n\n  /**\n   * Get the document as text.\n   */\n  public getText(options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  }): string {\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {}\n\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...getTextSerializersFromSchema(this.schema),\n        ...textSerializers,\n      },\n    })\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  public getCharacterCount(): number {\n    console.warn(\n      '[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.',\n    )\n\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      // Cleanup our reference to prevent circular references which caused memory leaks\n      // @ts-ignore\n      const dom = this.view.dom as TiptapEditorHTMLElement\n\n      if (dom && dom.editor) {\n        delete dom.editor\n      }\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n  public $node(selector: string, attributes?: { [key: string]: any }): NodePos | null {\n    return this.$doc?.querySelector(selector, attributes) || null\n  }\n\n  public $nodes(selector: string, attributes?: { [key: string]: any }): NodePos[] | null {\n    return this.$doc?.querySelectorAll(selector, attributes) || null\n  }\n\n  public $pos(pos: number) {\n    const $pos = this.state.doc.resolve(pos)\n\n    return new NodePos($pos, this)\n  }\n\n  get $doc() {\n    return this.$pos(0)\n  }\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween.js'\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nexport function markInputRule(config: {\n  find: InputRuleFinder\n  type: MarkType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        const markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nexport function nodeInputRule(config: {\n  /**\n   * The regex to match.\n   */\n  find: InputRuleFinder\n\n  /**\n   * The node type to add.\n   */\n  type: NodeType\n\n  /**\n   * A function that returns the attributes for the node\n   * can also be an object of attributes\n   */\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const { tr } = state\n      const start = range.from\n      let end = range.to\n\n      const newNode = config.type.create(attributes)\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n        let matchStart = start + offset\n\n        if (matchStart > end) {\n          matchStart = end\n        } else {\n          end = matchStart + match[1].length\n        }\n\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1]\n\n        tr.insertText(lastChar, start + match[0].length - 1)\n\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, newNode)\n      } else if (match[0]) {\n        const insertionStart = config.type.isInline ? start : start - 1\n\n        tr.insert(insertionStart, config.type.create(attributes)).delete(\n          tr.mapping.map(start),\n          tr.mapping.map(end),\n        )\n      }\n\n      tr.scrollIntoView()\n    },\n  })\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nexport function textblockTypeInputRule(config: {\n  find: InputRuleFinder\n  type: NodeType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const $start = state.doc.resolve(range.from)\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null\n      }\n\n      state.tr\n        .delete(range.from, range.to)\n        .setBlockType(range.from, range.from, config.type, attributes)\n    },\n  })\n}\n","import { InputRule, InputRuleFinder } from '../InputRule.js'\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nexport function textInputRule(config: {\n  find: InputRuleFinder,\n  replace: string,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Node as ProseMirrorNode, NodeType } from '@tiptap/pm/model'\nimport { canJoin, findWrapping } from '@tiptap/pm/transform'\n\nimport { Editor } from '../Editor.js'\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nexport function wrappingInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  keepMarks?: boolean,\n  keepAttributes?: boolean,\n  editor?: Editor\n  getAttributes?:\n  | Record<string, any>\n  | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n  | false\n  | null\n  ,\n  joinPredicate?: (match: ExtendedRegExpMatchArray, node: ProseMirrorNode) => boolean,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state, range, match, chain,\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const tr = state.tr.delete(range.from, range.to)\n      const $start = tr.doc.resolve(range.from)\n      const blockRange = $start.blockRange()\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes)\n\n      if (!wrapping) {\n        return null\n      }\n\n      tr.wrap(blockRange, wrapping)\n\n      if (config.keepMarks && config.editor) {\n        const { selection, storedMarks } = state\n        const { splittableMarks } = config.editor.extensionManager\n        const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n        if (marks) {\n          const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n          tr.ensureMarks(filteredMarks)\n        }\n      }\n      if (config.keepAttributes) {\n        /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\n        const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList'\n\n        chain().updateAttributes(nodeType, attributes).run()\n      }\n\n      const before = tr.doc.resolve(range.from - 1).nodeBefore\n\n      if (\n        before\n        && before.type === config.type\n        && canJoin(tr.doc, range.from - 1)\n        && (!config.joinPredicate || config.joinPredicate(match, before))\n      ) {\n        tr.join(range.from - 1)\n      }\n    },\n  })\n}\n","import {\n  DOMOutputSpec, Node as ProseMirrorNode, NodeSpec, NodeType,\n} from '@tiptap/pm/model'\nimport { Plugin, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { NodeConfig } from './index.js'\nimport { InputRule } from './InputRule.js'\nimport { Mark } from './Mark.js'\nimport { PasteRule } from './PasteRule.js'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  NodeViewRenderer,\n  ParentConfig,\n  RawCommands,\n} from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { mergeDeep } from './utilities/mergeDeep.js'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any, Storage = any> {\n    // @ts-ignore - this is a dynamic key\n    [key: string]: any\n\n    /**\n     * The extension name - this must be unique.\n     * It will be used to identify the extension.\n     *\n     * @example 'myExtension'\n     */\n    name: string\n\n    /**\n     * The priority of your extension. The higher, the earlier it will be called\n     * and will take precedence over other extensions with a lower priority.\n     * @default 100\n     * @example 101\n     */\n    priority?: number\n\n    /**\n     * The default options for this extension.\n     * @example\n     * defaultOptions: {\n     *   myOption: 'foo',\n     *   myOtherOption: 10,\n     * }\n     */\n    defaultOptions?: Options\n\n    /**\n     * This method will add options to this extension\n     * @see https://tiptap.dev/guide/custom-extensions#settings\n     * @example\n     * addOptions() {\n     *  return {\n     *    myOption: 'foo',\n     *    myOtherOption: 10,\n     * }\n     */\n    addOptions?: (this: {\n      name: string\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addOptions'], undefined>\n    }) => Options\n\n    /**\n     * The default storage this extension can save data to.\n     * @see https://tiptap.dev/guide/custom-extensions#storage\n     * @example\n     * defaultStorage: {\n     *   prefetchedUsers: [],\n     *   loading: false,\n     * }\n     */\n    addStorage?: (this: {\n      name: string\n      options: Options\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addStorage'], undefined>\n    }) => Storage\n\n    /**\n     * This function adds globalAttributes to specific nodes.\n     * @see https://tiptap.dev/guide/custom-extensions#global-attributes\n     * @example\n     * addGlobalAttributes() {\n     *   return [\n     *     {\n             // Extend the following extensions\n     *       types: [\n     *         'heading',\n     *         'paragraph',\n     *       ],\n     *       // … with those attributes\n     *       attributes: {\n     *         textAlign: {\n     *           default: 'left',\n     *           renderHTML: attributes => ({\n     *             style: `text-align: ${attributes.textAlign}`,\n     *           }),\n     *           parseHTML: element => element.style.textAlign || 'left',\n     *         },\n     *       },\n     *     },\n     *   ]\n     * }\n     */\n    addGlobalAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      extensions: (Node | Mark)[]\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addGlobalAttributes']\n    }) => GlobalAttributes\n\n    /**\n     * This function adds commands to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addCommands() {\n     *   return {\n     *     myCommand: () => ({ chain }) => chain().setMark('type', 'foo').run(),\n     *   }\n     * }\n     */\n    addCommands?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addCommands']\n    }) => Partial<RawCommands>\n\n    /**\n     * This function registers keyboard shortcuts.\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addKeyboardShortcuts() {\n     *   return {\n     *     'Mod-l': () => this.editor.commands.toggleBulletList(),\n     *   }\n     * },\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addKeyboardShortcuts']\n    }) => {\n      [key: string]: KeyboardShortcutCommand\n    }\n\n    /**\n     * This function adds input rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#input-rules\n     * @example\n     * addInputRules() {\n     *   return [\n     *     markInputRule({\n     *       find: inputRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addInputRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addInputRules']\n    }) => InputRule[]\n\n    /**\n     * This function adds paste rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#paste-rules\n     * @example\n     * addPasteRules() {\n     *   return [\n     *     markPasteRule({\n     *       find: pasteRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addPasteRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addPasteRules']\n    }) => PasteRule[]\n\n    /**\n     * This function adds Prosemirror plugins to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#prosemirror-plugins\n     * @example\n     * addProseMirrorPlugins() {\n     *   return [\n     *     customPlugin(),\n     *   ]\n     * }\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addProseMirrorPlugins']\n    }) => Plugin[]\n\n    /**\n     * This function adds additional extensions to the editor. This is useful for\n     * building extension kits.\n     * @example\n     * addExtensions() {\n     *   return [\n     *     BulletList,\n     *     OrderedList,\n     *     ListItem\n     *   ]\n     * }\n     */\n    addExtensions?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addExtensions']\n    }) => Extensions\n\n    /**\n     * This function extends the schema of the node.\n     * @example\n     * extendNodeSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendNodeSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['extendNodeSchema']\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * This function extends the schema of the mark.\n     * @example\n     * extendMarkSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendMarkSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['extendMarkSchema']\n            editor?: Editor\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onBeforeCreate']\n        }) => void)\n      | null\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onCreate']\n        }) => void)\n      | null\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onSelectionUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: NodeType\n            parent: ParentConfig<NodeConfig<Options, Storage>>['onTransaction']\n          },\n          props: {\n            editor: Editor\n            transaction: Transaction\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: NodeType\n            parent: ParentConfig<NodeConfig<Options, Storage>>['onFocus']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: NodeType\n            parent: ParentConfig<NodeConfig<Options, Storage>>['onBlur']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onDestroy']\n        }) => void)\n      | null\n\n    /**\n     * Node View\n     */\n    addNodeView?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['addNodeView']\n        }) => NodeViewRenderer)\n      | null\n\n    /**\n     * Defines if this node should be a top level node (doc)\n     * @default false\n     * @example true\n     */\n    topNode?: boolean\n\n    /**\n     * The content expression for this node, as described in the [schema\n     * guide](/docs/guide/#schema.content_expressions). When not given,\n     * the node does not allow any content.\n     *\n     * You can read more about it on the Prosemirror documentation here\n     * @see https://prosemirror.net/docs/guide/#schema.content_expressions\n     * @default undefined\n     * @example content: 'block+'\n     * @example content: 'headline paragraph block*'\n     */\n    content?:\n      | NodeSpec['content']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['content']\n          editor?: Editor\n        }) => NodeSpec['content'])\n\n    /**\n     * The marks that are allowed inside of this node. May be a\n     * space-separated string referring to mark names or groups, `\"_\"`\n     * to explicitly allow all marks, or `\"\"` to disallow marks. When\n     * not given, nodes with inline content default to allowing all\n     * marks, other nodes default to not allowing marks.\n     *\n     * @example marks: 'strong em'\n     */\n    marks?:\n      | NodeSpec['marks']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['marks']\n          editor?: Editor\n        }) => NodeSpec['marks'])\n\n    /**\n     * The group or space-separated groups to which this node belongs,\n     * which can be referred to in the content expressions for the\n     * schema.\n     *\n     * By default Tiptap uses the groups 'block' and 'inline' for nodes. You\n     * can also use custom groups if you want to group specific nodes together\n     * and handle them in your schema.\n     * @example group: 'block'\n     * @example group: 'inline'\n     * @example group: 'customBlock' // this uses a custom group\n     */\n    group?:\n      | NodeSpec['group']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['group']\n          editor?: Editor\n        }) => NodeSpec['group'])\n\n    /**\n     * Should be set to true for inline nodes. (Implied for text nodes.)\n     */\n    inline?:\n      | NodeSpec['inline']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['inline']\n          editor?: Editor\n        }) => NodeSpec['inline'])\n\n    /**\n     * Can be set to true to indicate that, though this isn't a [leaf\n     * node](https://prosemirror.net/docs/ref/#model.NodeType.isLeaf), it doesn't have directly editable\n     * content and should be treated as a single unit in the view.\n     *\n     * @example atom: true\n     */\n    atom?:\n      | NodeSpec['atom']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['atom']\n          editor?: Editor\n        }) => NodeSpec['atom'])\n\n    /**\n     * Controls whether nodes of this type can be selected as a [node\n     * selection](https://prosemirror.net/docs/ref/#state.NodeSelection). Defaults to true for non-text\n     * nodes.\n     *\n     * @default true\n     * @example selectable: false\n     */\n    selectable?:\n      | NodeSpec['selectable']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['selectable']\n          editor?: Editor\n        }) => NodeSpec['selectable'])\n\n    /**\n     * Determines whether nodes of this type can be dragged without\n     * being selected. Defaults to false.\n     *\n     * @default: false\n     * @example: draggable: true\n     */\n    draggable?:\n      | NodeSpec['draggable']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['draggable']\n          editor?: Editor\n        }) => NodeSpec['draggable'])\n\n    /**\n     * Can be used to indicate that this node contains code, which\n     * causes some commands to behave differently.\n     */\n    code?:\n      | NodeSpec['code']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['code']\n          editor?: Editor\n        }) => NodeSpec['code'])\n\n    /**\n     * Controls way whitespace in this a node is parsed. The default is\n     * `\"normal\"`, which causes the [DOM parser](https://prosemirror.net/docs/ref/#model.DOMParser) to\n     * collapse whitespace in normal mode, and normalize it (replacing\n     * newlines and such with spaces) otherwise. `\"pre\"` causes the\n     * parser to preserve spaces inside the node. When this option isn't\n     * given, but [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) is true, `whitespace`\n     * will default to `\"pre\"`. Note that this option doesn't influence\n     * the way the node is rendered—that should be handled by `toDOM`\n     * and/or styling.\n     */\n    whitespace?:\n      | NodeSpec['whitespace']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['whitespace']\n          editor?: Editor\n        }) => NodeSpec['whitespace'])\n\n    /**\n     * Allows a **single** node to be set as linebreak equivalent (e.g. hardBreak).\n     * When converting between block types that have whitespace set to \"pre\"\n     * and don't support the linebreak node (e.g. codeBlock) and other block types\n     * that do support the linebreak node (e.g. paragraphs) - this node will be used\n     * as the linebreak instead of stripping the newline.\n     *\n     * See [linebreakReplacement](https://prosemirror.net/docs/ref/#model.NodeSpec.linebreakReplacement).\n     */\n    linebreakReplacement?:\n      | NodeSpec['linebreakReplacement']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['linebreakReplacement']\n          editor?: Editor\n        }) => NodeSpec['linebreakReplacement'])\n\n    /**\n     * When enabled, enables both\n     * [`definingAsContext`](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext) and\n     * [`definingForContent`](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).\n     *\n     * @default false\n     * @example isolating: true\n     */\n    defining?:\n      | NodeSpec['defining']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['defining']\n          editor?: Editor\n        }) => NodeSpec['defining'])\n\n    /**\n     * When enabled (default is false), the sides of nodes of this type\n     * count as boundaries that regular editing operations, like\n     * backspacing or lifting, won't cross. An example of a node that\n     * should probably have this enabled is a table cell.\n     */\n    isolating?:\n      | NodeSpec['isolating']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['isolating']\n          editor?: Editor\n        }) => NodeSpec['isolating'])\n\n    /**\n     * Associates DOM parser information with this node, which can be\n     * used by [`DOMParser.fromSchema`](https://prosemirror.net/docs/ref/#model.DOMParser^fromSchema) to\n     * automatically derive a parser. The `node` field in the rules is\n     * implied (the name of this node will be filled in automatically).\n     * If you supply your own parser, you do not need to also specify\n     * parsing rules in your schema.\n     *\n     * @example parseHTML: [{ tag: 'div', attrs: { 'data-id': 'my-block' } }]\n     */\n    parseHTML?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<NodeConfig<Options, Storage>>['parseHTML']\n      editor?: Editor\n    }) => NodeSpec['parseDOM']\n\n    /**\n     * A description of a DOM structure. Can be either a string, which is\n     * interpreted as a text node, a DOM node, which is interpreted as\n     * itself, a `{dom, contentDOM}` object, or an array.\n     *\n     * An array describes a DOM element. The first value in the array\n     * should be a string—the name of the DOM element, optionally prefixed\n     * by a namespace URL and a space. If the second element is plain\n     * object, it is interpreted as a set of attributes for the element.\n     * Any elements after that (including the 2nd if it's not an attribute\n     * object) are interpreted as children of the DOM elements, and must\n     * either be valid `DOMOutputSpec` values, or the number zero.\n     *\n     * The number zero (pronounced “hole”) is used to indicate the place\n     * where a node's child nodes should be inserted. If it occurs in an\n     * output spec, it should be the only child element in its parent\n     * node.\n     *\n     * @example toDOM: ['div[data-id=\"my-block\"]', { class: 'my-block' }, 0]\n     */\n    renderHTML?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['renderHTML']\n            editor?: Editor\n          },\n          props: {\n            node: ProseMirrorNode\n            HTMLAttributes: Record<string, any>\n          },\n        ) => DOMOutputSpec)\n      | null\n\n    /**\n     * renders the node as text\n     * @example renderText: () => 'foo\n     */\n    renderText?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['renderText']\n            editor?: Editor\n          },\n          props: {\n            node: ProseMirrorNode\n            pos: number\n            parent: ProseMirrorNode\n            index: number\n          },\n        ) => string)\n      | null\n\n    /**\n     * Add attributes to the node\n     * @example addAttributes: () => ({ class: 'foo' })\n     */\n    addAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addAttributes']\n      editor?: Editor\n    // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    }) => Attributes | {}\n  }\n}\n\n/**\n * The Node class is used to create custom node extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nexport class Node<Options = any, Storage = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`,\n      )\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(\n        getExtensionField<AnyConfig['addOptions']>(this, 'addOptions', {\n          name: this.name,\n        }),\n      )\n    }\n\n    this.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(this, 'addStorage', {\n        name: this.name,\n        options: this.options,\n      }),\n    ) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<NodeConfig<O, S>> = {}) {\n    return new Node<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend<Options, Storage>({\n      ...this.config,\n      addOptions: () => {\n        return mergeDeep(this.options as Record<string, any>, options) as Options\n      },\n    })\n\n    // Always preserve the current name\n    extension.name = this.name\n    // Set the parent to be our parent\n    extension.parent = this.parent\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(\n    extendedConfig: Partial<NodeConfig<ExtendedOptions, ExtendedStorage>> = {},\n  ) {\n    const extension = new Node<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name\n\n    if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`,\n      )\n    }\n\n    extension.options = callOrReturn(\n      getExtensionField<AnyConfig['addOptions']>(extension, 'addOptions', {\n        name: extension.name,\n      }),\n    )\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n}\n","import { NodeSelection } from '@tiptap/pm/state'\nimport { NodeView as ProseMirrorNodeView, ViewMutationRecord } from '@tiptap/pm/view'\n\nimport { Editor as CoreEditor } from './Editor.js'\nimport { DecorationWithType, NodeViewRendererOptions, NodeViewRendererProps } from './types.js'\nimport { isAndroid } from './utilities/isAndroid.js'\nimport { isiOS } from './utilities/isiOS.js'\n\n/**\n * Node views are used to customize the rendered DOM structure of a node.\n * @see https://tiptap.dev/guide/node-views\n */\nexport class NodeView<\n  Component,\n  NodeEditor extends CoreEditor = CoreEditor,\n  Options extends NodeViewRendererOptions = NodeViewRendererOptions,\n> implements ProseMirrorNodeView {\n  component: Component\n\n  editor: NodeEditor\n\n  options: Options\n\n  extension: NodeViewRendererProps['extension']\n\n  node: NodeViewRendererProps['node']\n\n  decorations: NodeViewRendererProps['decorations']\n\n  innerDecorations: NodeViewRendererProps['innerDecorations']\n\n  view: NodeViewRendererProps['view']\n\n  getPos: NodeViewRendererProps['getPos']\n\n  HTMLAttributes: NodeViewRendererProps['HTMLAttributes']\n\n  isDragging = false\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    this.component = component\n    this.editor = props.editor as NodeEditor\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options,\n    } as Options\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations as DecorationWithType[]\n    this.innerDecorations = props.innerDecorations\n    this.view = props.view\n    this.HTMLAttributes = props.HTMLAttributes\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): HTMLElement {\n    return this.editor.view.dom as HTMLElement\n  }\n\n  get contentDOM(): HTMLElement | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = event.target as HTMLElement\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (!this.dom || this.contentDOM?.contains(target) || !dragHandle) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n      const offsetX = event.offsetX ?? (event as any).nativeEvent?.offsetX\n      const offsetY = event.offsetY ?? (event as any).nativeEvent?.offsetY\n\n      x = handleBox.x - domBox.x + offsetX\n      y = handleBox.y - domBox.y + offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    const pos = this.getPos()\n\n    if (typeof pos !== 'number') {\n      return\n    }\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, pos)\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({ event })\n    }\n\n    const target = event.target as HTMLElement\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isDragEvent = event.type.startsWith('drag')\n    const isDropEvent = event.type === 'drop'\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent && !isDragEvent) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent && event.target === this.dom) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging && event.target === this.dom) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener(\n          'dragend',\n          () => {\n            this.isDragging = false\n          },\n          { once: true },\n        )\n\n        document.addEventListener(\n          'drop',\n          () => {\n            this.isDragging = false\n          },\n          { once: true },\n        )\n\n        document.addEventListener(\n          'mouseup',\n          () => {\n            this.isDragging = false\n          },\n          { once: true },\n        )\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isDropEvent\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Called when a DOM [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) or a selection change happens within the view.\n   * @return `false` if the editor should re-read the selection or re-parse the range around the mutation\n   * @return `true` if it can safely be ignored.\n   */\n  ignoreMutation(mutation: ViewMutationRecord) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({ mutation })\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS and Android that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    // see: https://github.com/ueberdosis/tiptap/issues/2534\n    if (\n      this.dom.contains(mutation.target)\n      && mutation.type === 'childList'\n      && (isiOS() || isAndroid())\n      && this.editor.isFocused\n    ) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Update the attributes of the prosemirror node.\n   */\n  updateAttributes(attributes: Record<string, any>): void {\n    this.editor.commands.command(({ tr }) => {\n      const pos = this.getPos()\n\n      if (typeof pos !== 'number') {\n        return false\n      }\n\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes,\n      })\n\n      return true\n    })\n  }\n\n  /**\n   * Delete the node.\n   */\n  deleteNode(): void {\n    const from = this.getPos()\n\n    if (typeof from !== 'number') {\n      return\n    }\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween.js'\nimport { PasteRule, PasteRuleFinder } from '../PasteRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nexport function markPasteRule(config: {\n  find: PasteRuleFinder\n  type: MarkType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray, event: ClipboardEvent) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({\n      state, range, match, pasteEvent,\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","// source: https://stackoverflow.com/a/6969486\nexport function escapeForRegEx(string: string): string {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string'\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { PasteRule, PasteRuleFinder } from '../PasteRule.js'\nimport { ExtendedRegExpMatchArray, JSONContent } from '../types.js'\nimport { callOrReturn } from '../utilities/index.js'\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nexport function nodePasteRule(config: {\n  find: PasteRuleFinder\n  type: NodeType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray, event: ClipboardEvent) => Record<string, any>)\n    | false\n    | null\n  getContent?:\n    | JSONContent[]\n    | ((attrs: Record<string, any>) => JSONContent[])\n    | false\n    | null\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler({\n      match, chain, range, pasteEvent,\n    }) {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent)\n      const content = callOrReturn(config.getContent, undefined, attributes)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const node = { type: config.type.name, attrs: attributes } as JSONContent\n\n      if (content) {\n        node.content = content\n      }\n\n      if (match.input) {\n        chain().deleteRange(range).insertContentAt(range.from, node)\n      }\n    },\n  })\n}\n","import { PasteRule, PasteRuleFinder } from '../PasteRule.js'\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nexport function textPasteRule(config: {\n  find: PasteRuleFinder,\n  replace: string,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Transaction } from '@tiptap/pm/state'\n\nexport interface TrackerResult {\n  position: number\n  deleted: boolean\n}\n\nexport class Tracker {\n  transaction: Transaction\n\n  currentStep: number\n\n  constructor(transaction: Transaction) {\n    this.transaction = transaction\n    this.currentStep = this.transaction.steps.length\n  }\n\n  map(position: number): TrackerResult {\n    let deleted = false\n\n    const mappedPosition = this.transaction.steps\n      .slice(this.currentStep)\n      .reduce((newPosition, step) => {\n        const mapResult = step.getMap().mapResult(newPosition)\n\n        if (mapResult.deleted) {\n          deleted = true\n        }\n\n        return mapResult.pos\n      }, position)\n\n    return {\n      position: mappedPosition,\n      deleted,\n    }\n  }\n}\n"],"names":["run","originalCreateParagraphNear","originalDeleteSelection","originalExitCode","ProseMirrorNode","originalJoinUp","originalJoinDown","originalJoinBackward","originalJoinForward","originalCommand","originalLift","originalLiftEmptyBlock","originalLiftListItem","originalNewlineInCode","originalSelectNodeBackward","originalSelectNodeForward","originalSelectParentNode","originalSelectTextblockEnd","originalSelectTextblockStart","Node","originalSinkListItem","originalWrapIn","originalWrapInList"],"mappings":"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"}},
    {"offset": {"line": 5355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}