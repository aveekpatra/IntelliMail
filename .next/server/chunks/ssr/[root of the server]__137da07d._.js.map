{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/lib/stripe.ts"],"sourcesContent":["'server-only'\nimport Stripe from 'stripe'\n\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n    apiVersion: '2024-06-20',\n})\n\n"],"names":[],"mappings":";;;AACA;AADA;;AAGO,MAAM,SAAS,IAAI,sJAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAG;IAC7D,YAAY;AAChB","debugId":null}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,oIAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;SAAO,GAAG;YAAC;SAAQ;IAClE;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/lib/stripe-actions.ts"],"sourcesContent":["'use server'\n\nimport { auth } from \"@clerk/nextjs/server\";\nimport { stripe } from \"./stripe\";\nimport { redirect } from \"next/navigation\";\nimport { db } from \"@/server/db\";\n\nexport async function createCheckoutSession() {\n    const { userId } = await auth();\n\n    if (!userId) {\n        throw new Error('User not found');\n    }\n\n    const session = await stripe.checkout.sessions.create({\n        payment_method_types: ['card'],\n        line_items: [\n            {\n                price: process.env.STRIPE_PRICE_ID,\n                quantity: 1,\n            },\n        ],\n        mode: 'subscription',\n        success_url: `${process.env.NEXT_PUBLIC_URL}/mail`,\n        cancel_url: `${process.env.NEXT_PUBLIC_URL}/pricing`,\n        client_reference_id: userId.toString(),\n    });\n\n    redirect(session.url!);\n}\n\nexport async function createBillingPortalSession() {\n    const { userId } = await auth();\n    if (!userId) {\n        return false\n    }\n    const subscription = await db.stripeSubscription.findUnique({\n        where: { userId: userId },\n    });\n    if (!subscription?.customerId) {\n        throw new Error('Subscription not found');\n    }\n    const session = await stripe.billingPortal.sessions.create({\n        customer: subscription.customerId,\n        return_url: `${process.env.NEXT_PUBLIC_URL}/pricing`,\n    });\n    redirect(session.url!)\n}\n\nexport async function getSubscriptionStatus() {\n    const { userId } = await auth();\n    if (!userId) {\n        return false\n    }\n    const subscription = await db.stripeSubscription.findUnique({\n        where: { userId: userId },\n    });\n    if (!subscription) {\n        return false;\n    }\n    return subscription.currentPeriodEnd > new Date();\n}\n\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;AAAA;AACA;;;;;;;;AAEO,eAAe,uCAAmB,GAAnB;IAClB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAE5B,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IAEA,MAAM,UAAU,MAAM,oHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;QAClD,sBAAsB;YAAC;SAAO;QAC9B,YAAY;YACR;gBACI,OAAO,QAAQ,GAAG,CAAC,eAAe;gBAClC,UAAU;YACd;SACH;QACD,MAAM;QACN,aAAa,6DAA+B,KAAK,CAAC;QAClD,YAAY,6DAA+B,QAAQ,CAAC;QACpD,qBAAqB,OAAO,QAAQ;IACxC;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,GAAG;AACxB;AAEO,eAAe,uCAAwB,GAAxB;IAClB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACT,OAAO;IACX;IACA,MAAM,eAAe,MAAM,mHAAA,CAAA,KAAE,CAAC,kBAAkB,CAAC,UAAU,CAAC;QACxD,OAAO;YAAE,QAAQ;QAAO;IAC5B;IACA,IAAI,CAAC,cAAc,YAAY;QAC3B,MAAM,IAAI,MAAM;IACpB;IACA,MAAM,UAAU,MAAM,oHAAA,CAAA,SAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC;QACvD,UAAU,aAAa,UAAU;QACjC,YAAY,6DAA+B,QAAQ,CAAC;IACxD;IACA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,GAAG;AACxB;AAEO,eAAe,uCAAmB,GAAnB;IAClB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACT,OAAO;IACX;IACA,MAAM,eAAe,MAAM,mHAAA,CAAA,KAAE,CAAC,kBAAkB,CAAC,UAAU,CAAC;QACxD,OAAO;YAAE,QAAQ;QAAO;IAC5B;IACA,IAAI,CAAC,cAAc;QACf,OAAO;IACX;IACA,OAAO,aAAa,gBAAgB,GAAG,IAAI;AAC/C;;;IAtDsB;IAwBA;IAkBA;;AA1CA,+OAAA;AAwBA,+OAAA;AAkBA,+OAAA","debugId":null}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/constants.ts"],"sourcesContent":["export const FREE_CREDITS_PER_DAY = 15\nexport const FREE_ACCOUNTS_PER_USER = 1\nexport const PRO_ACCOUNTS_PER_USER = 3"],"names":[],"mappings":";;;;;AAAO,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB","debugId":null}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/lib/gmail.ts"],"sourcesContent":["\"use server\";\n\nimport { google } from \"googleapis\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { getSubscriptionStatus } from \"./stripe-actions\";\nimport { db } from \"@/server/db\";\nimport { FREE_ACCOUNTS_PER_USER, PRO_ACCOUNTS_PER_USER } from \"@/app/constants\";\n\n// Create OAuth2 client\nfunction getOAuth2Client() {\n  console.log(\"Creating OAuth2 client with credentials...\");\n  return new google.auth.OAuth2(\n    process.env.GOOGLE_CLIENT_ID,\n    process.env.GOOGLE_CLIENT_SECRET,\n    `${process.env.NEXT_PUBLIC_URL}/api/auth/callback/gmail`,\n  );\n}\n\n/**\n * Generate the authorization URL for Gmail OAuth\n */\nexport const getGmailAuthUrl = async () => {\n  try {\n    console.log(\"Starting Gmail auth URL generation...\");\n    const { userId } = await auth();\n    if (!userId) {\n      console.error(\"No user ID found in auth\");\n      throw new Error(\"User not found\");\n    }\n    console.log(\"Got user ID:\", userId);\n\n    const user = await db.user.upsert({\n      where: { id: userId },\n      update: {},\n      create: {\n        id: userId,\n        emailAddress: \"temp@example.com\", // This will be updated by the webhook\n        role: \"user\",\n      },\n    });\n    console.log(\"User record created/updated:\", user);\n\n    // Check subscription limits\n    console.log(\"Checking subscription limits...\");\n    const isSubscribed = await getSubscriptionStatus();\n    console.log(\"Subscription status:\", isSubscribed);\n\n    const accounts = await db.account.count({\n      where: { userId },\n    });\n    console.log(\"Current account count:\", accounts);\n    console.log(\n      \"Account limit:\",\n      isSubscribed ? PRO_ACCOUNTS_PER_USER : FREE_ACCOUNTS_PER_USER,\n    );\n\n    // Temporarily disabled account limits\n    /*\n    if (user.role === \"user\") {\n      if (isSubscribed) {\n        if (accounts >= PRO_ACCOUNTS_PER_USER) {\n          console.error(\"User has reached maximum accounts for subscription\", {\n            currentAccounts: accounts,\n            maxAccounts: PRO_ACCOUNTS_PER_USER,\n            isSubscribed: true,\n          });\n          throw new Error(\n            \"You have reached the maximum number of accounts for your subscription\",\n          );\n        }\n      } else {\n        if (accounts >= FREE_ACCOUNTS_PER_USER) {\n          console.error(\"User has reached maximum free accounts\", {\n            currentAccounts: accounts,\n            maxAccounts: FREE_ACCOUNTS_PER_USER,\n            isSubscribed: false,\n          });\n          throw new Error(\n            \"You have reached the maximum number of accounts for your subscription\",\n          );\n        }\n      }\n    }\n    */\n\n    console.log(\"Creating OAuth2 client...\");\n    const oauth2Client = getOAuth2Client();\n    const scopes = [\n      \"https://www.googleapis.com/auth/gmail.readonly\",\n      \"https://www.googleapis.com/auth/gmail.send\",\n      \"https://www.googleapis.com/auth/gmail.compose\",\n      \"https://www.googleapis.com/auth/gmail.modify\",\n      \"https://www.googleapis.com/auth/userinfo.email\",\n      \"https://www.googleapis.com/auth/userinfo.profile\",\n    ];\n    console.log(\"Using scopes:\", scopes);\n\n    console.log(\"Generating auth URL with state:\", userId);\n    const authUrl = oauth2Client.generateAuthUrl({\n      access_type: \"offline\",\n      scope: scopes,\n      prompt: \"consent\",\n      state: userId,\n    });\n    console.log(\"Auth URL generated successfully:\", authUrl);\n\n    return authUrl;\n  } catch (error) {\n    console.error(\"Error in getGmailAuthUrl:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n\n/**\n * Exchange authorization code for tokens\n */\nexport const getGmailTokens = async (code: string) => {\n  try {\n    console.log(\"Starting token exchange process...\");\n    console.log(\"Creating OAuth2 client for token exchange...\");\n    const oauth2Client = getOAuth2Client();\n\n    console.log(\"Exchanging code for tokens...\");\n    const { tokens } = await oauth2Client.getToken(code);\n\n    console.log(\"Token exchange successful\");\n    if (!tokens.access_token) {\n      console.error(\"No access token received\");\n      throw new Error(\"Failed to get access token\");\n    }\n\n    console.log(\"Tokens received:\", {\n      accessTokenExists: !!tokens.access_token,\n      refreshTokenExists: !!tokens.refresh_token,\n      expiryDate: tokens.expiry_date,\n    });\n\n    return {\n      accessToken: tokens.access_token,\n      refreshToken: tokens.refresh_token,\n      expiryDate: tokens.expiry_date,\n    };\n  } catch (error) {\n    console.error(\"Error in getGmailTokens:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n\n/**\n * Get Gmail user information\n */\nexport const getGmailUserInfo = async (accessToken: string) => {\n  try {\n    console.log(\"Starting user info fetch process...\");\n    console.log(\"Setting up OAuth2 client with access token...\");\n    const oauth2Client = getOAuth2Client();\n    oauth2Client.setCredentials({ access_token: accessToken });\n\n    console.log(\"Creating People API client...\");\n    const peopleApi = google.people({ version: \"v1\", auth: oauth2Client });\n\n    console.log(\"Fetching user profile...\");\n    const profile = await peopleApi.people.get({\n      resourceName: \"people/me\",\n      personFields: \"emailAddresses,names\",\n    });\n\n    console.log(\"User profile fetched successfully\");\n    const userInfo = {\n      email: profile.data.emailAddresses?.[0]?.value || \"\",\n      name: profile.data.names?.[0]?.displayName || \"\",\n    };\n    console.log(\"User info:\", userInfo);\n\n    return userInfo;\n  } catch (error) {\n    console.error(\"Error in getGmailUserInfo:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n\n/**\n * Create a Gmail account for syncing emails\n */\nexport async function createGmailAccount(\n  accessToken: string,\n  refreshToken: string | null | undefined,\n) {\n  try {\n    console.log(\"Creating Gmail account with tokens...\");\n    console.log(\"Token info:\", {\n      accessTokenExists: !!accessToken,\n      refreshTokenExists: !!refreshToken,\n    });\n\n    // Implementation for syncing emails and sending\n    const gmailAccount = {\n      accessToken,\n      refreshToken,\n\n      async syncEmails() {\n        console.log(\"Starting email sync process...\");\n        // Implement email syncing logic here\n        return { success: true, count: 0 };\n      },\n\n      async sendEmail(options: { to: string; subject: string; body: string }) {\n        console.log(\"Sending email:\", options);\n        const oauth2Client = getOAuth2Client();\n        oauth2Client.setCredentials({ access_token: accessToken });\n\n        const gmail = google.gmail({ version: \"v1\", auth: oauth2Client });\n\n        // Format the email according to Gmail API requirements\n        const message = [\n          `To: ${options.to}`,\n          `Subject: ${options.subject}`,\n          \"Content-Type: text/html; charset=utf-8\",\n          \"\",\n          options.body,\n        ].join(\"\\n\");\n\n        const encodedMessage = Buffer.from(message)\n          .toString(\"base64\")\n          .replace(/\\+/g, \"-\")\n          .replace(/\\//g, \"_\")\n          .replace(/=+$/, \"\");\n\n        console.log(\"Sending email via Gmail API...\");\n        await gmail.users.messages.send({\n          userId: \"me\",\n          requestBody: {\n            raw: encodedMessage,\n          },\n        });\n\n        console.log(\"Email sent successfully\");\n        return { success: true };\n      },\n    };\n\n    console.log(\"Gmail account created successfully\");\n    return gmailAccount;\n  } catch (error) {\n    console.error(\"Error in createGmailAccount:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n}\n\n/**\n * Refresh the Gmail access token using the refresh token\n */\nexport const refreshGmailToken = async (refreshToken: string) => {\n  try {\n    console.log(\"Starting token refresh process...\");\n    const oauth2Client = getOAuth2Client();\n\n    console.log(\"Setting refresh token...\");\n    oauth2Client.setCredentials({\n      refresh_token: refreshToken,\n    });\n\n    console.log(\"Refreshing access token...\");\n    const { credentials } = await oauth2Client.refreshAccessToken();\n\n    console.log(\"Access token refreshed successfully\");\n    return {\n      accessToken: credentials.access_token,\n      expiryDate: credentials.expiry_date,\n    };\n  } catch (error) {\n    console.error(\"Error refreshing Gmail token:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n\n/**\n * Fetch Gmail emails directly from Gmail API\n */\nexport const fetchGmailEmails = async (\n  accessToken: string,\n  maxResults = 20,\n  refreshToken?: string | null,\n) => {\n  try {\n    console.log(\"Starting Gmail email fetch process...\");\n    console.log(\"Setting up OAuth2 client with access token...\");\n    const oauth2Client = getOAuth2Client();\n    oauth2Client.setCredentials({\n      access_token: accessToken,\n      refresh_token: refreshToken || undefined,\n    });\n\n    console.log(\"Creating Gmail API client...\");\n    const gmail = google.gmail({ version: \"v1\", auth: oauth2Client });\n\n    console.log(\"Fetching emails from Gmail API...\");\n    const response = await gmail.users.messages.list({\n      userId: \"me\",\n      maxResults: maxResults,\n      q: \"in:inbox\",\n    });\n\n    console.log(`Retrieved ${response.data.messages?.length || 0} email IDs`);\n\n    if (!response.data.messages || response.data.messages.length === 0) {\n      console.log(\"No emails found\");\n      return [];\n    }\n\n    // Get email details for each message ID\n    console.log(\"Fetching email details...\");\n    const emails = await Promise.all(\n      response.data.messages.map(async (message) => {\n        if (!message.id) return null;\n\n        const emailDetail = await gmail.users.messages.get({\n          userId: \"me\",\n          id: message.id,\n        });\n\n        const headers = emailDetail.data.payload?.headers || [];\n\n        // Extract email headers\n        const subject =\n          headers.find((h) => h.name === \"Subject\")?.value || \"(No subject)\";\n        const from = headers.find((h) => h.name === \"From\")?.value || \"\";\n        const to = headers.find((h) => h.name === \"To\")?.value || \"\";\n        const date = headers.find((h) => h.name === \"Date\")?.value || \"\";\n\n        // Extract email body (text or HTML)\n        let body = \"\";\n        const parts = emailDetail.data.payload?.parts || [];\n\n        if (parts.length > 0) {\n          // Try to find HTML body first\n          const htmlPart = parts.find((p) => p.mimeType === \"text/html\");\n          const textPart = parts.find((p) => p.mimeType === \"text/plain\");\n\n          if (htmlPart && htmlPart.body && htmlPart.body.data) {\n            body = Buffer.from(htmlPart.body.data, \"base64\").toString(\"utf-8\");\n          } else if (textPart && textPart.body && textPart.body.data) {\n            body = Buffer.from(textPart.body.data, \"base64\").toString(\"utf-8\");\n          }\n        } else if (emailDetail.data.payload?.body?.data) {\n          // For single-part messages\n          body = Buffer.from(\n            emailDetail.data.payload.body.data,\n            \"base64\",\n          ).toString(\"utf-8\");\n        }\n\n        // Create a snippet from the body (first 100 chars)\n        const snippet =\n          body.substring(0, 100) + (body.length > 100 ? \"...\" : \"\");\n\n        return {\n          id: message.id,\n          threadId: emailDetail.data.threadId,\n          labelIds: emailDetail.data.labelIds || [],\n          snippet: emailDetail.data.snippet || snippet,\n          subject,\n          from,\n          to,\n          date,\n          body,\n        };\n      }),\n    );\n\n    console.log(`Fetched details for ${emails.filter(Boolean).length} emails`);\n    return emails.filter(Boolean);\n  } catch (error) {\n    console.error(\"Error in fetchGmailEmails:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n      });\n    }\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 769, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/mail/components/email-editor/action.ts"],"sourcesContent":["'use server';\nimport TurndownService from 'turndown'\n\nimport { streamText } from 'ai';\nimport { openai } from '@ai-sdk/openai';\nimport { createStreamableValue } from 'ai/rsc';\n\nexport async function generateEmail(context: string, prompt: string) {\n    console.log(\"context\", context)\n    const stream = createStreamableValue('');\n\n    (async () => {\n        const { textStream } = await streamText({\n            model: openai('gpt-4-turbo'),\n            prompt: `\n            You are an AI email assistant embedded in an email client app. Your purpose is to help the user compose emails by providing suggestions and relevant information based on the context of their previous emails.\n            \n            THE TIME NOW IS ${new Date().toLocaleString()}\n            \n            START CONTEXT BLOCK\n            ${context}\n            END OF CONTEXT BLOCK\n            \n            USER PROMPT:\n            ${prompt}\n            \n            When responding, please keep in mind:\n            - Be helpful, clever, and articulate. \n            - Rely on the provided email context to inform your response.\n            - If the context does not contain enough information to fully address the prompt, politely give a draft response.\n            - Avoid apologizing for previous responses. Instead, indicate that you have updated your knowledge based on new information.\n            - Do not invent or speculate about anything that is not directly supported by the email context.\n            - Keep your response focused and relevant to the user's prompt.\n            - Don't add fluff like 'Heres your email' or 'Here's your email' or anything like that.\n            - Directly output the email, no need to say 'Here is your email' or anything like that.\n            - No need to output subject\n            `,\n        });\n\n        for await (const delta of textStream) {\n            stream.update(delta);\n        }\n\n        stream.done();\n    })();\n\n    return { output: stream.value };\n}\n\nexport async function generate(input: string) {\n    const stream = createStreamableValue('');\n\n    console.log(\"input\", input);\n    (async () => {\n        const { textStream } = await streamText({\n            model: openai('gpt-4'),\n            prompt: `\n            ALWAYS RESPOND IN PLAIN TEXT, no html or markdown.\n            You are a helpful AI embedded in a email client app that is used to autocomplete sentences, similar to google gmail autocomplete\n            The traits of AI include expert knowledge, helpfulness, cleverness, and articulateness.\n            AI is a well-behaved and well-mannered individual.\n            AI is always friendly, kind, and inspiring, and he is eager to provide vivid and thoughtful responses to the user.\n            I am writing a piece of text in a notion text editor app.\n            Help me complete my train of thought here: <input>${input}</input>\n            keep the tone of the text consistent with the rest of the text.\n            keep the response short and sweet. Act like a copilot, finish my sentence if need be, but don't try to generate a whole new paragraph.\n            Do not add fluff like \"I'm here to help you\" or \"I'm a helpful AI\" or anything like that.\n\n            Example:\n            Dear Alice, I'm sorry to hear that you are feeling down.\n\n            Output: Unfortunately, I can't help you with that.\n\n            Your output is directly concatenated to the input, so do not add any new lines or formatting, just plain text.\n            `,\n        });\n\n        for await (const delta of textStream) {\n            stream.update(delta);\n        }\n\n        stream.done();\n    })();\n\n    return { output: stream.value };\n}"],"names":[],"mappings":";;;;;;AAGA;AACA;AACA;;;;;;;AAEO,eAAe,uCAAW,GAAX,cAAc,OAAe,EAAE,MAAc;IAC/D,QAAQ,GAAG,CAAC,WAAW;IACvB,MAAM,SAAS,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;IAErC,CAAC;QACG,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE;YACpC,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE;YACd,QAAQ,CAAC;;;4BAGO,EAAE,IAAI,OAAO,cAAc,GAAG;;;YAG9C,EAAE,QAAQ;;;;YAIV,EAAE,OAAO;;;;;;;;;;;;YAYT,CAAC;QACL;QAEA,WAAW,MAAM,SAAS,WAAY;YAClC,OAAO,MAAM,CAAC;QAClB;QAEA,OAAO,IAAI;IACf,CAAC;IAED,OAAO;QAAE,QAAQ,OAAO,KAAK;IAAC;AAClC;AAEO,eAAe,uCAAM,GAAN,SAAS,KAAa;IACxC,MAAM,SAAS,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;IAErC,QAAQ,GAAG,CAAC,SAAS;IACrB,CAAC;QACG,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE;YACpC,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE;YACd,QAAQ,CAAC;;;;;;;8DAOyC,EAAE,MAAM;;;;;;;;;;;YAW1D,CAAC;QACL;QAEA,WAAW,MAAM,SAAS,WAAY;YAClC,OAAO,MAAM,CAAC;QAClB;QAEA,OAAO,IAAI;IACf,CAAC;IAED,OAAO;QAAE,QAAQ,OAAO,KAAK;IAAC;AAClC;;;IA9EsB;IA0CA;;AA1CA,+OAAA;AA0CA,+OAAA","debugId":null}},
    {"offset": {"line": 877, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/mail/client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mail/client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mail/client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 891, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/mail/client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mail/client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mail/client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","debugId":null}},
    {"offset": {"line": 905, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 915, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/%28auth%29/mail/gmail-debug.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/mail/gmail-debug.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/mail/gmail-debug.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 929, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/%28auth%29/mail/gmail-debug.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/mail/gmail-debug.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/mail/gmail-debug.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 943, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 953, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/%28auth%29/mail/page.tsx"],"sourcesContent":["import { cookies } from \"next/headers\";\nimport MailClient from \"@/app/mail/client\";\nimport GmailDebug from \"./gmail-debug\";\n\nexport const metadata = {\n  title: \"Mail - Lumi\",\n  description: \"Example mail app built with shadcn/ui components\",\n};\n\nexport default async function MailPage() {\n  // First await the cookies() function itself\n  const cookiesStore = await cookies();\n\n  // Then get values from the cookie store\n  const layout = cookiesStore.get(\"react-resizable-panels:layout:mail\");\n  const collapsed = cookiesStore.get(\"react-resizable-panels:collapsed\");\n\n  // Parse the layout from cookies\n  let defaultLayout = undefined;\n  try {\n    if (layout?.value) {\n      defaultLayout = JSON.parse(layout.value);\n    }\n  } catch (e) {\n    console.error(\"Failed to parse layout from cookies\", e);\n  }\n\n  // Parse collapsed state\n  const defaultCollapsed = collapsed ? JSON.parse(collapsed.value) : undefined;\n\n  return (\n    <div className=\"flex h-screen w-screen flex-col\">\n      <div className=\"hidden h-full w-full flex-1 md:flex\">\n        <MailClient\n          defaultLayout={defaultLayout}\n          defaultCollapsed={defaultCollapsed}\n          useRealEmails={false}\n          useGmailEmails={true}\n        />\n      </div>\n      <div className=\"block p-4 text-center md:hidden\">\n        <p>Mail interface not available on mobile devices.</p>\n      </div>\n\n      {/* Gmail Debug Widget */}\n      <GmailDebug />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;AAEO,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAEe,eAAe;IAC5B,4CAA4C;IAC5C,MAAM,eAAe,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEjC,wCAAwC;IACxC,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,YAAY,aAAa,GAAG,CAAC;IAEnC,gCAAgC;IAChC,IAAI,gBAAgB;IACpB,IAAI;QACF,IAAI,QAAQ,OAAO;YACjB,gBAAgB,KAAK,KAAK,CAAC,OAAO,KAAK;QACzC;IACF,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,uCAAuC;IACvD;IAEA,wBAAwB;IACxB,MAAM,mBAAmB,YAAY,KAAK,KAAK,CAAC,UAAU,KAAK,IAAI;IAEnE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,6HAAA,CAAA,UAAU;oBACT,eAAe;oBACf,kBAAkB;oBAClB,eAAe;oBACf,gBAAgB;;;;;;;;;;;0BAGpB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;8BAAE;;;;;;;;;;;0BAIL,8OAAC,iJAAA,CAAA,UAAU;;;;;;;;;;;AAGjB","debugId":null}}]
}