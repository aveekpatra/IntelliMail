{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/mail/components/kbar/index.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mail/components/kbar/index.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mail/components/kbar/index.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA"}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/trpc/react.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TRPCReactProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call TRPCReactProvider() from the server but TRPCReactProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx\",\n    \"TRPCReactProvider\",\n);\nexport const api = registerClientReference(\n    function() { throw new Error(\"Attempted to call api() from the server but api is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx\",\n    \"api\",\n);\n"],"names":[],"mappings":";;;;;;;AACO,MAAM,oBAAoB,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,gCACA;AAEG,MAAM,MAAM,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,gCACA"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/theme-provicer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ThemeProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThemeProvider() from the server but ThemeProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/theme-provicer.tsx\",\n    \"ThemeProvider\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,gBAAgB,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,+CACA"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/layout.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\nimport Kbar from \"@/app/mail/components/kbar\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\n\nimport { GeistSans } from \"geist/font/sans\";\nimport { type Metadata } from \"next\";\n\nimport { TRPCReactProvider } from \"@/trpc/react\";\nimport { ThemeProvider } from \"@/components/theme-provicer\";\nimport { Toaster } from \"sonner\";\n\nexport const metadata: Metadata = {\n  title: \"Normal Human\",\n  icons: [{ rel: \"icon\", url: \"/favicon.ico\" }],\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{ children: React.ReactNode }>) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\" className={`${GeistSans.variable}`}>\n        <body>\n          <ThemeProvider attribute='class' defaultTheme='system' enableSystem disableTransitionOnChange>\n            <TRPCReactProvider>\n              <Kbar>\n                {children}\n              </Kbar>\n            </TRPCReactProvider>\n            <Toaster />\n          </ThemeProvider>\n        </body>\n      </html>\n    </ClerkProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAWO,MAAM,WAAqB;IAChC,OAAO;IACP,OAAO;QAAC;YAAE,KAAK;YAAQ,KAAK;QAAe;KAAE;AAC/C;AAEe,SAAS,WAAW,EACjC,QAAQ,EACgC;IACxC,qBACE,wPAAC,yKAAA,CAAA,gBAAa;kBACZ,cAAA,wPAAC;YAAK,MAAK;YAAK,WAAW,CAAC,EAAE,2LAAA,CAAA,YAAS,CAAC,QAAQ,CAAC,CAAC;sBAChD,cAAA,wPAAC;0BACC,cAAA,wPAAC,uIAAA,CAAA,gBAAa;oBAAC,WAAU;oBAAQ,cAAa;oBAAS,YAAY;oBAAC,yBAAyB;;sCAC3F,wPAAC,qHAAA,CAAA,oBAAiB;sCAChB,cAAA,wPAAC,kJAAA,CAAA,UAAI;0CACF;;;;;;;;;;;sCAGL,wPAAC,wIAAA,CAAA,UAAO;;;;;;;;;;;;;;;;;;;;;;;;;;AAMpB"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/theme-toggle.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ModeToggle = registerClientReference(\n    function() { throw new Error(\"Attempted to call ModeToggle() from the server but ModeToggle is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/theme-toggle.tsx\",\n    \"ModeToggle\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,aAAa,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,6CACA"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/mail/components/compose-button.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mail/components/compose-button.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mail/components/compose-button.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/mail/components/webhook-debugger.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mail/components/webhook-debugger.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mail/components/webhook-debugger.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4R,GACzT,0DACA"}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/(auth)/mail/page.tsx"],"sourcesContent":["const MailPage = dynamic(() => import(\"@/app/mail/index\"), {\n  loading: () => <div>Loading...</div>,\n  ssr: false,\n});\nimport { ModeToggle } from \"@/components/theme-toggle\";\nimport { UserButton } from \"@clerk/nextjs\";\nimport dynamic from \"next/dynamic\";\nimport { Button } from \"@/components/ui/button\";\nimport ComposeButton from \"@/app/mail/components/compose-button\";\nimport WebhookDebugger from \"@/app/mail/components/webhook-debugger\";\nimport TopAccountSwitcher from \"./top-account-switcher\";\n\nexport const metadata = {\n  title: \"Mail - shadcn/ui\",\n  description: \"Example mail app built with shadcn/ui components\",\n};\n\nexport default function Home() {\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <div className=\"hidden md:flex h-full flex-1\">\n        <MailPage />\n      </div>\n      <div className=\"block md:hidden p-4 text-center\">\n        <p>Mail interface not available on mobile devices.</p>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,WAAW,CAAA,GAAA,+JAAA,CAAA,UAAO,AAAD,EAAE,0HAAkC;IACzD,SAAS,kBAAM,wPAAC;sBAAI;;;;;;IACpB,KAAK;AACP;;AASO,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAEe,SAAS;IACtB,qBACE,wPAAC;QAAI,WAAU;;0BACb,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC;;;;;;;;;;0BAEH,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC;8BAAE;;;;;;;;;;;;;;;;;AAIX"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/mail/components/email-editor/action.ts [app-client] (ecmascript, action)"],"sourcesContent":["'use server';\nimport TurndownService from 'turndown'\n\nimport { streamText } from 'ai';\nimport { openai } from '@ai-sdk/openai';\nimport { createStreamableValue } from 'ai/rsc';\n\nexport async function generateEmail(context: string, prompt: string) {\n    console.log(\"context\", context)\n    const stream = createStreamableValue('');\n\n    (async () => {\n        const { textStream } = await streamText({\n            model: openai('gpt-4-turbo'),\n            prompt: `\n            You are an AI email assistant embedded in an email client app. Your purpose is to help the user compose emails by providing suggestions and relevant information based on the context of their previous emails.\n            \n            THE TIME NOW IS ${new Date().toLocaleString()}\n            \n            START CONTEXT BLOCK\n            ${context}\n            END OF CONTEXT BLOCK\n            \n            USER PROMPT:\n            ${prompt}\n            \n            When responding, please keep in mind:\n            - Be helpful, clever, and articulate. \n            - Rely on the provided email context to inform your response.\n            - If the context does not contain enough information to fully address the prompt, politely give a draft response.\n            - Avoid apologizing for previous responses. Instead, indicate that you have updated your knowledge based on new information.\n            - Do not invent or speculate about anything that is not directly supported by the email context.\n            - Keep your response focused and relevant to the user's prompt.\n            - Don't add fluff like 'Heres your email' or 'Here's your email' or anything like that.\n            - Directly output the email, no need to say 'Here is your email' or anything like that.\n            - No need to output subject\n            `,\n        });\n\n        for await (const delta of textStream) {\n            stream.update(delta);\n        }\n\n        stream.done();\n    })();\n\n    return { output: stream.value };\n}\n\nexport async function generate(input: string) {\n    const stream = createStreamableValue('');\n\n    console.log(\"input\", input);\n    (async () => {\n        const { textStream } = await streamText({\n            model: openai('gpt-4'),\n            prompt: `\n            ALWAYS RESPOND IN PLAIN TEXT, no html or markdown.\n            You are a helpful AI embedded in a email client app that is used to autocomplete sentences, similar to google gmail autocomplete\n            The traits of AI include expert knowledge, helpfulness, cleverness, and articulateness.\n            AI is a well-behaved and well-mannered individual.\n            AI is always friendly, kind, and inspiring, and he is eager to provide vivid and thoughtful responses to the user.\n            I am writing a piece of text in a notion text editor app.\n            Help me complete my train of thought here: <input>${input}</input>\n            keep the tone of the text consistent with the rest of the text.\n            keep the response short and sweet. Act like a copilot, finish my sentence if need be, but don't try to generate a whole new paragraph.\n            Do not add fluff like \"I'm here to help you\" or \"I'm a helpful AI\" or anything like that.\n\n            Example:\n            Dear Alice, I'm sorry to hear that you are feeling down.\n\n            Output: Unfortunately, I can't help you with that.\n\n            Your output is directly concatenated to the input, so do not add any new lines or formatting, just plain text.\n            `,\n        });\n\n        for await (const delta of textStream) {\n            stream.update(delta);\n        }\n\n        stream.done();\n    })();\n\n    return { output: stream.value };\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAOO,eAAe,cAAc,OAAe,EAAE,MAAc;IAC/D,QAAQ,GAAG,CAAC,WAAW;IACvB,MAAM,SAAS,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;IAErC,CAAC;QACG,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE;YACpC,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE;YACd,QAAQ,CAAC;;;4BAGO,EAAE,IAAI,OAAO,cAAc,GAAG;;;YAG9C,EAAE,QAAQ;;;;YAIV,EAAE,OAAO;;;;;;;;;;;;YAYT,CAAC;QACL;QAEA,WAAW,MAAM,SAAS,WAAY;YAClC,OAAO,MAAM,CAAC;QAClB;QAEA,OAAO,IAAI;IACf,CAAC;IAED,OAAO;QAAE,QAAQ,OAAO,KAAK;IAAC;AAClC;AAEO,eAAe,SAAS,KAAa;IACxC,MAAM,SAAS,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;IAErC,QAAQ,GAAG,CAAC,SAAS;IACrB,CAAC;QACG,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE;YACpC,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE;YACd,QAAQ,CAAC;;;;;;;8DAOyC,EAAE,MAAM;;;;;;;;;;;YAW1D,CAAC;QACL;QAEA,WAAW,MAAM,SAAS,WAAY;YAClC,OAAO,MAAM,CAAC;QAClB;QAEA,OAAO,IAAI;IACf,CAAC;IAED,OAAO;QAAE,QAAQ,OAAO,KAAK;IAAC;AAClC"}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}