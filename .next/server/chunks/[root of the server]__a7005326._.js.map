{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,sIAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;SAAO,GAAG;YAAC;SAAQ;IAClE;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/aveekpatra/Coding/lumi/src/app/api/accounts/route.ts"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/server/db\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET() {\n  try {\n    console.log(\"Account list request received\");\n\n    // Get the authenticated user with proper auth awaiting\n    const session = await auth();\n    const userId = session.userId;\n\n    if (!userId) {\n      console.error(\"No user ID found in auth\");\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    // Get all accounts for the user\n    const accounts = await db.account.findMany({\n      where: {\n        userId: userId,\n      },\n      select: {\n        id: true,\n        provider: true,\n        emailAddress: true,\n        name: true,\n        // createdAt is not in the schema, so remove it\n      },\n      orderBy: {\n        id: \"desc\", // Use id instead of createdAt for ordering\n      },\n    });\n\n    // Add fake createdAt field to match the expected structure in the UI\n    const accountsWithCreatedAt = accounts.map((account) => ({\n      ...account,\n      createdAt: new Date().toISOString(), // Add a current date since we don't have actual creation dates\n    }));\n\n    console.log(`Found ${accounts.length} accounts for user ${userId}`);\n\n    return NextResponse.json({ accounts: accountsWithCreatedAt });\n  } catch (error) {\n    console.error(\"Error listing accounts:\", error);\n    return NextResponse.json(\n      { error: \"Failed to list accounts\" },\n      { status: 500 },\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;;;;;;;AAEO,eAAe,uCAAC,GAAD;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,uDAAuD;QACvD,MAAM,UAAU,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;QACzB,MAAM,SAAS,QAAQ,MAAM;QAE7B,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,gCAAgC;QAChC,MAAM,WAAW,MAAM,qHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;YACzC,OAAO;gBACL,QAAQ;YACV;YACA,QAAQ;gBACN,IAAI;gBACJ,UAAU;gBACV,cAAc;gBACd,MAAM;YAER;YACA,SAAS;gBACP,IAAI;YACN;QACF;QAEA,qEAAqE;QACrE,MAAM,wBAAwB,SAAS,GAAG,CAAC,CAAC,UAAY,CAAC;gBACvD,GAAG,OAAO;gBACV,WAAW,IAAI,OAAO,WAAW;YACnC,CAAC;QAED,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,SAAS,MAAM,CAAC,mBAAmB,EAAE,QAAQ;QAElE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,UAAU;QAAsB;IAC7D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;;;IA9CsB;;AAAA,iPAAA","debugId":null}}]
}